{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 504,
   "outputs": [],
   "source": [],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2023-12-20T13:45:05.843014200Z",
     "start_time": "2023-12-20T13:45:05.766991300Z"
    }
   },
   "id": "df3c8a727bb6dbaf"
  },
  {
   "cell_type": "code",
   "execution_count": 505,
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Step\n"
     ]
    }
   ],
   "source": [
    "from sqlalchemy import create_engine\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import sqlalchemy as sa\n",
    "from sqlalchemy.engine import URL\n",
    "\n",
    "print('Step')\n",
    "connection_string = \"DRIVER={ODBC Driver 17 for SQL Server};SERVER=GPS-SRV20;DATABASE=Parc;UID=SMMT\\\\alvesd;PWD=;Trusted_connection=yes\"\n",
    "connection_url = URL.create(\"mssql+pyodbc\", query={\"odbc_connect\": connection_string})\n",
    "\n",
    "engine = create_engine(connection_url)\n",
    "\n",
    "with engine.begin() as conn:\n",
    "    seats = pd.read_sql_query(sa.text('''SELECT Top (100000) * FROM [DataShop] where [Number of Seats] = '2'; '''), conn)"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2023-12-20T13:45:08.514715100Z",
     "start_time": "2023-12-20T13:45:05.770993800Z"
    }
   },
   "id": "830e720969ce0cbd"
  },
  {
   "cell_type": "code",
   "execution_count": 506,
   "outputs": [],
   "source": [
    "seats.to_csv(\n",
    "    r'C:\\\\Users\\\\alvesd\\\\OneDrive - smmt.co.uk\\\\Desktop\\\\Diego_work_folder\\\\python\\\\33_Sales_Target_Region_Vehicle_Seats\\\\Parc_Data.csv', index=False)"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2023-12-20T13:45:09.017235600Z",
     "start_time": "2023-12-20T13:45:08.512714600Z"
    }
   },
   "id": "b85fac7ed421d8b"
  },
  {
   "cell_type": "code",
   "execution_count": 507,
   "outputs": [],
   "source": [
    "import webbrowser\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from matplotlib_inline.config import InlineBackend\n",
    "\n",
    "np.random.seed(0)\n",
    "import statsmodels.api as sm\n",
    "from sklearn.preprocessing import StandardScaler, LabelEncoder\n",
    "\n",
    "scale = StandardScaler()"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2023-12-20T13:45:09.026205Z",
     "start_time": "2023-12-20T13:45:09.017235600Z"
    }
   },
   "id": "initial_id"
  },
  {
   "cell_type": "code",
   "execution_count": 508,
   "outputs": [],
   "source": [
    "# Load the data set and repalce the empty rows for NaN valeu\n",
    "parc = pd.read_csv(\n",
    "    \"C:\\\\Users\\\\alvesd\\\\OneDrive - smmt.co.uk\\\\Desktop\\\\Diego_work_folder\\\\python\\\\33_Sales_Target_Region_Vehicle_Seats\\\\Parc_Data.csv\")"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2023-12-20T13:45:09.181549600Z",
     "start_time": "2023-12-20T13:45:09.022203900Z"
    }
   },
   "id": "daa55b42d1a928ae"
  },
  {
   "cell_type": "code",
   "execution_count": 509,
   "outputs": [
    {
     "data": {
      "text/plain": "                  Sector      Make  Range              Variant  \\\n0         C LOWER MEDIUM  VAUXHALL  COMBO  COMBO TOUR ESSENTIA   \n1         C LOWER MEDIUM  VAUXHALL  COMBO  COMBO TOUR ESSENTIA   \n2         C LOWER MEDIUM  VAUXHALL  COMBO  COMBO TOUR ESSENTIA   \n3         C LOWER MEDIUM  VAUXHALL  COMBO  COMBO TOUR ESSENTIA   \n4         C LOWER MEDIUM  VAUXHALL  COMBO  COMBO TOUR ESSENTIA   \n..                   ...       ...    ...                  ...   \n995  G SPECIALIST SPORTS     MAZDA   MX-5                 MX-5   \n996  G SPECIALIST SPORTS     MAZDA   MX-5                 MX-5   \n997  G SPECIALIST SPORTS     MAZDA   MX-5                 MX-5   \n998  G SPECIALIST SPORTS     MAZDA   MX-5                 MX-5   \n999  G SPECIALIST SPORTS     MAZDA   MX-5                 MX-5   \n\n    Country of Origin     Body Style DVLA Body Type Transmission  \n0               SPAIN         ESTATE            MPV       MANUAL  \n1               SPAIN         ESTATE            MPV       MANUAL  \n2               SPAIN         ESTATE            MPV       MANUAL  \n3               SPAIN         ESTATE            MPV       MANUAL  \n4               SPAIN         ESTATE            MPV       MANUAL  \n..                ...            ...            ...          ...  \n995             JAPAN  2 CONVERTIBLE    CONVERTIBLE       MANUAL  \n996             JAPAN  2 CONVERTIBLE    CONVERTIBLE       MANUAL  \n997             JAPAN  2 CONVERTIBLE    CONVERTIBLE       MANUAL  \n998             JAPAN  2 CONVERTIBLE    CONVERTIBLE       MANUAL  \n999             JAPAN  2 CONVERTIBLE    CONVERTIBLE       MANUAL  \n\n[1000 rows x 8 columns]",
      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Sector</th>\n      <th>Make</th>\n      <th>Range</th>\n      <th>Variant</th>\n      <th>Country of Origin</th>\n      <th>Body Style</th>\n      <th>DVLA Body Type</th>\n      <th>Transmission</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>C LOWER MEDIUM</td>\n      <td>VAUXHALL</td>\n      <td>COMBO</td>\n      <td>COMBO TOUR ESSENTIA</td>\n      <td>SPAIN</td>\n      <td>ESTATE</td>\n      <td>MPV</td>\n      <td>MANUAL</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>C LOWER MEDIUM</td>\n      <td>VAUXHALL</td>\n      <td>COMBO</td>\n      <td>COMBO TOUR ESSENTIA</td>\n      <td>SPAIN</td>\n      <td>ESTATE</td>\n      <td>MPV</td>\n      <td>MANUAL</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>C LOWER MEDIUM</td>\n      <td>VAUXHALL</td>\n      <td>COMBO</td>\n      <td>COMBO TOUR ESSENTIA</td>\n      <td>SPAIN</td>\n      <td>ESTATE</td>\n      <td>MPV</td>\n      <td>MANUAL</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>C LOWER MEDIUM</td>\n      <td>VAUXHALL</td>\n      <td>COMBO</td>\n      <td>COMBO TOUR ESSENTIA</td>\n      <td>SPAIN</td>\n      <td>ESTATE</td>\n      <td>MPV</td>\n      <td>MANUAL</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>C LOWER MEDIUM</td>\n      <td>VAUXHALL</td>\n      <td>COMBO</td>\n      <td>COMBO TOUR ESSENTIA</td>\n      <td>SPAIN</td>\n      <td>ESTATE</td>\n      <td>MPV</td>\n      <td>MANUAL</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>995</th>\n      <td>G SPECIALIST SPORTS</td>\n      <td>MAZDA</td>\n      <td>MX-5</td>\n      <td>MX-5</td>\n      <td>JAPAN</td>\n      <td>2 CONVERTIBLE</td>\n      <td>CONVERTIBLE</td>\n      <td>MANUAL</td>\n    </tr>\n    <tr>\n      <th>996</th>\n      <td>G SPECIALIST SPORTS</td>\n      <td>MAZDA</td>\n      <td>MX-5</td>\n      <td>MX-5</td>\n      <td>JAPAN</td>\n      <td>2 CONVERTIBLE</td>\n      <td>CONVERTIBLE</td>\n      <td>MANUAL</td>\n    </tr>\n    <tr>\n      <th>997</th>\n      <td>G SPECIALIST SPORTS</td>\n      <td>MAZDA</td>\n      <td>MX-5</td>\n      <td>MX-5</td>\n      <td>JAPAN</td>\n      <td>2 CONVERTIBLE</td>\n      <td>CONVERTIBLE</td>\n      <td>MANUAL</td>\n    </tr>\n    <tr>\n      <th>998</th>\n      <td>G SPECIALIST SPORTS</td>\n      <td>MAZDA</td>\n      <td>MX-5</td>\n      <td>MX-5</td>\n      <td>JAPAN</td>\n      <td>2 CONVERTIBLE</td>\n      <td>CONVERTIBLE</td>\n      <td>MANUAL</td>\n    </tr>\n    <tr>\n      <th>999</th>\n      <td>G SPECIALIST SPORTS</td>\n      <td>MAZDA</td>\n      <td>MX-5</td>\n      <td>MX-5</td>\n      <td>JAPAN</td>\n      <td>2 CONVERTIBLE</td>\n      <td>CONVERTIBLE</td>\n      <td>MANUAL</td>\n    </tr>\n  </tbody>\n</table>\n<p>1000 rows Ã— 8 columns</p>\n</div>"
     },
     "execution_count": 509,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "filtered_data = parc[parc[\"Number of Seats\"]==2]\n",
    "filtered_data.iloc[0:1000, 1:9]"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2023-12-20T13:45:09.195178200Z",
     "start_time": "2023-12-20T13:45:09.181549600Z"
    }
   },
   "id": "e685d9246fc8f0dd"
  },
  {
   "cell_type": "markdown",
   "source": [
    "# Load the data set and repalce the empty rows for NaN valeu\n",
    "parc = pd.read_excel(\n",
    "    \"C:\\\\Users\\\\alvesd\\\\OneDrive - smmt.co.uk\\\\Desktop\\\\Diego_work_folder\\\\python\\\\33_Sales_Target_Region_Vehicle_Seats\\\\Parc_Data.xlsx\")"
   ],
   "metadata": {
    "collapsed": false
   },
   "id": "6e46401a530040f3"
  },
  {
   "cell_type": "code",
   "execution_count": 510,
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The Column Header : ['Vehicle Type', 'Sector', 'Make', 'Range', 'Variant', 'Country of Origin', 'Body Style', 'DVLA Body Type', 'Transmission', 'Nominal Engine Capacity', 'Engine CC', 'Fuel Type', 'Aspiration', 'Drive_Type', 'Power BHP', 'MVRISPostcode', 'Company_Private', 'Number Previous Keepers', 'Number of Seats', 'Colour', 'Weight', 'Year of 1st Reg', 'Count of Registrations']\n"
     ]
    }
   ],
   "source": [
    "# Print Headers\n",
    "#print(parc.head(5))\n",
    "# Print columns headers:\n",
    "column_headers = list(parc.columns.values)\n",
    "print(\"The Column Header :\", column_headers)"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2023-12-20T13:45:09.199732800Z",
     "start_time": "2023-12-20T13:45:09.196226400Z"
    }
   },
   "id": "77cff64f3051eae2"
  },
  {
   "cell_type": "code",
   "execution_count": 511,
   "outputs": [],
   "source": [
    "parc.rename({'MVRISPostcode': 'Postcode District', 'Count of Registrations': 'Registrations', 'Company_Private': 'Company/Private'}, axis=1, inplace=True)"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2023-12-20T13:45:09.207295400Z",
     "start_time": "2023-12-20T13:45:09.198731600Z"
    }
   },
   "id": "d4a6c0fbb331980a"
  },
  {
   "cell_type": "code",
   "execution_count": 512,
   "outputs": [
    {
     "data": {
      "text/plain": "         Make Company/Private  Registrations  Number of Seats     Body Style\n0    VAUXHALL               P              1                2         ESTATE\n1    VAUXHALL               P              1                2         ESTATE\n2    VAUXHALL               P              1                2         ESTATE\n3    VAUXHALL               P              1                2         ESTATE\n4    VAUXHALL               P              1                2         ESTATE\n..        ...             ...            ...              ...            ...\n995     MAZDA               P              1                2  2 CONVERTIBLE\n996     MAZDA               P              1                2  2 CONVERTIBLE\n997     MAZDA               P              1                2  2 CONVERTIBLE\n998     MAZDA               P              1                2  2 CONVERTIBLE\n999     MAZDA               P              1                2  2 CONVERTIBLE\n\n[1000 rows x 5 columns]",
      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Make</th>\n      <th>Company/Private</th>\n      <th>Registrations</th>\n      <th>Number of Seats</th>\n      <th>Body Style</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>VAUXHALL</td>\n      <td>P</td>\n      <td>1</td>\n      <td>2</td>\n      <td>ESTATE</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>VAUXHALL</td>\n      <td>P</td>\n      <td>1</td>\n      <td>2</td>\n      <td>ESTATE</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>VAUXHALL</td>\n      <td>P</td>\n      <td>1</td>\n      <td>2</td>\n      <td>ESTATE</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>VAUXHALL</td>\n      <td>P</td>\n      <td>1</td>\n      <td>2</td>\n      <td>ESTATE</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>VAUXHALL</td>\n      <td>P</td>\n      <td>1</td>\n      <td>2</td>\n      <td>ESTATE</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>995</th>\n      <td>MAZDA</td>\n      <td>P</td>\n      <td>1</td>\n      <td>2</td>\n      <td>2 CONVERTIBLE</td>\n    </tr>\n    <tr>\n      <th>996</th>\n      <td>MAZDA</td>\n      <td>P</td>\n      <td>1</td>\n      <td>2</td>\n      <td>2 CONVERTIBLE</td>\n    </tr>\n    <tr>\n      <th>997</th>\n      <td>MAZDA</td>\n      <td>P</td>\n      <td>1</td>\n      <td>2</td>\n      <td>2 CONVERTIBLE</td>\n    </tr>\n    <tr>\n      <th>998</th>\n      <td>MAZDA</td>\n      <td>P</td>\n      <td>1</td>\n      <td>2</td>\n      <td>2 CONVERTIBLE</td>\n    </tr>\n    <tr>\n      <th>999</th>\n      <td>MAZDA</td>\n      <td>P</td>\n      <td>1</td>\n      <td>2</td>\n      <td>2 CONVERTIBLE</td>\n    </tr>\n  </tbody>\n</table>\n<p>1000 rows Ã— 5 columns</p>\n</div>"
     },
     "execution_count": 512,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "parc = parc[['Postcode District','Make','Company/Private','Registrations','Number of Seats', 'Body Style']]\n",
    "filtered_data = parc[parc[\"Number of Seats\"]==2]\n",
    "filtered_data.iloc[0:1000, 1:9]"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2023-12-20T13:45:09.295348300Z",
     "start_time": "2023-12-20T13:45:09.202294900Z"
    }
   },
   "id": "32177df04f894a86"
  },
  {
   "cell_type": "code",
   "execution_count": 513,
   "outputs": [],
   "source": [
    "# remove space in column values using strip() function\n",
    "parc['Postcode District'] = parc['Postcode District'].apply(lambda x: x.strip())"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2023-12-20T13:45:09.296348600Z",
     "start_time": "2023-12-20T13:45:09.223387100Z"
    }
   },
   "id": "c61b409bcd3e7b92"
  },
  {
   "cell_type": "code",
   "execution_count": 514,
   "outputs": [],
   "source": [
    "# Load the data set and repalce the empty rows for NaN valeu\n",
    "post_codes = pd.read_csv(\n",
    "    \"C:\\\\Users\\\\alvesd\\\\OneDrive - smmt.co.uk\\\\Desktop\\\\Diego_work_folder\\\\python\\\\33_Sales_Target_Region_Vehicle_Seats\\\\HTML_Data\\\\postcode-outcodes.csv\")"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2023-12-20T13:45:09.296348600Z",
     "start_time": "2023-12-20T13:45:09.237266600Z"
    }
   },
   "id": "f4b3ae4f4f70e5eb"
  },
  {
   "cell_type": "code",
   "execution_count": 515,
   "outputs": [],
   "source": [
    "post_codes.rename({'postcode': 'Postcode District'}, axis=1, inplace=True)"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2023-12-20T13:45:09.296348600Z",
     "start_time": "2023-12-20T13:45:09.242473Z"
    }
   },
   "id": "559083380161efe3"
  },
  {
   "cell_type": "code",
   "execution_count": 516,
   "outputs": [],
   "source": [
    "parc = pd.merge(parc,  \n",
    "                      post_codes,  \n",
    "                      on ='Postcode District',  \n",
    "                      how ='inner') "
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2023-12-20T13:45:09.330357400Z",
     "start_time": "2023-12-20T13:45:09.248267300Z"
    }
   },
   "id": "9040b5930086faa6"
  },
  {
   "cell_type": "code",
   "execution_count": 517,
   "outputs": [
    {
     "data": {
      "text/plain": "                Make Company/Private  Registrations  Number of Seats  \\\n0           VAUXHALL               P              1                2   \n1              MAZDA               P              1                2   \n2              MAZDA               P              1                2   \n3            CITROEN               P              1                2   \n4            RENAULT               P              1                2   \n..               ...             ...            ...              ...   \n995        CHEVROLET               P              1                2   \n996       DAF TRUCKS               C              1                2   \n997  MITSUBISHI FUSO               C              1                2   \n998         MERCEDES               C              1                2   \n999       DAF TRUCKS               C              1                2   \n\n        Body Style  latitude  longitude  \n0           ESTATE  51.21675   1.385412  \n1    2 CONVERTIBLE  51.21675   1.385412  \n2    2 CONVERTIBLE  51.21675   1.385412  \n3              MPV  51.21675   1.385412  \n4              MPV  51.21675   1.385412  \n..             ...       ...        ...  \n995        PICK UP  50.52943  -3.612316  \n996          OTHER  50.52943  -3.612316  \n997          OTHER  50.52943  -3.612316  \n998          OTHER  50.52943  -3.612316  \n999          OTHER  50.52943  -3.612316  \n\n[1000 rows x 7 columns]",
      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Make</th>\n      <th>Company/Private</th>\n      <th>Registrations</th>\n      <th>Number of Seats</th>\n      <th>Body Style</th>\n      <th>latitude</th>\n      <th>longitude</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>VAUXHALL</td>\n      <td>P</td>\n      <td>1</td>\n      <td>2</td>\n      <td>ESTATE</td>\n      <td>51.21675</td>\n      <td>1.385412</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>MAZDA</td>\n      <td>P</td>\n      <td>1</td>\n      <td>2</td>\n      <td>2 CONVERTIBLE</td>\n      <td>51.21675</td>\n      <td>1.385412</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>MAZDA</td>\n      <td>P</td>\n      <td>1</td>\n      <td>2</td>\n      <td>2 CONVERTIBLE</td>\n      <td>51.21675</td>\n      <td>1.385412</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>CITROEN</td>\n      <td>P</td>\n      <td>1</td>\n      <td>2</td>\n      <td>MPV</td>\n      <td>51.21675</td>\n      <td>1.385412</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>RENAULT</td>\n      <td>P</td>\n      <td>1</td>\n      <td>2</td>\n      <td>MPV</td>\n      <td>51.21675</td>\n      <td>1.385412</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>995</th>\n      <td>CHEVROLET</td>\n      <td>P</td>\n      <td>1</td>\n      <td>2</td>\n      <td>PICK UP</td>\n      <td>50.52943</td>\n      <td>-3.612316</td>\n    </tr>\n    <tr>\n      <th>996</th>\n      <td>DAF TRUCKS</td>\n      <td>C</td>\n      <td>1</td>\n      <td>2</td>\n      <td>OTHER</td>\n      <td>50.52943</td>\n      <td>-3.612316</td>\n    </tr>\n    <tr>\n      <th>997</th>\n      <td>MITSUBISHI FUSO</td>\n      <td>C</td>\n      <td>1</td>\n      <td>2</td>\n      <td>OTHER</td>\n      <td>50.52943</td>\n      <td>-3.612316</td>\n    </tr>\n    <tr>\n      <th>998</th>\n      <td>MERCEDES</td>\n      <td>C</td>\n      <td>1</td>\n      <td>2</td>\n      <td>OTHER</td>\n      <td>50.52943</td>\n      <td>-3.612316</td>\n    </tr>\n    <tr>\n      <th>999</th>\n      <td>DAF TRUCKS</td>\n      <td>C</td>\n      <td>1</td>\n      <td>2</td>\n      <td>OTHER</td>\n      <td>50.52943</td>\n      <td>-3.612316</td>\n    </tr>\n  </tbody>\n</table>\n<p>1000 rows Ã— 7 columns</p>\n</div>"
     },
     "execution_count": 517,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "parc = parc[['Postcode District','Make','Company/Private','Registrations','Number of Seats', 'Body Style', 'latitude', 'longitude']]\n",
    "filtered_data = parc[parc[\"Number of Seats\"]==2]\n",
    "filtered_data.iloc[0:1000, 1:9]"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2023-12-20T13:45:09.334358400Z",
     "start_time": "2023-12-20T13:45:09.275339Z"
    }
   },
   "id": "59e7323a9522c17"
  },
  {
   "cell_type": "code",
   "execution_count": 518,
   "outputs": [],
   "source": [
    "parc.to_excel(\"C:\\\\Users\\\\alvesd\\\\OneDrive - smmt.co.uk\\\\Desktop\\\\Diego_work_folder\\\\python\\\\33_Sales_Target_Region_Vehicle_Seats\\\\Parc_Data.xlsx\", index=False)"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2023-12-20T13:45:16.359492500Z",
     "start_time": "2023-12-20T13:45:09.294348Z"
    }
   },
   "id": "c0c46c3ed8cd0fe9"
  },
  {
   "cell_type": "code",
   "execution_count": 519,
   "outputs": [],
   "source": [
    "# Turn Texts to numbers\n",
    "le = LabelEncoder()\n",
    "\n",
    "ignore = ['latitude','longitude', 'Postcode District', 'Make', 'Number of Seats'] \n",
    "\n",
    "parc = (parc.set_index(ignore, append=True)\n",
    "        .apply(le.fit_transform)\n",
    "        .reset_index(ignore)\n",
    "       )"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2023-12-20T13:45:16.420361900Z",
     "start_time": "2023-12-20T13:45:16.359492500Z"
    }
   },
   "id": "22790e47d07ee3ba"
  },
  {
   "cell_type": "code",
   "execution_count": 520,
   "outputs": [
    {
     "data": {
      "text/plain": "                  Make Postcode District  Company/Private  Registrations  \\\n0             VAUXHALL              CT14                1              0   \n1                MAZDA              CT14                1              0   \n2                MAZDA              CT14                1              0   \n3              CITROEN              CT14                1              0   \n4              RENAULT              CT14                1              0   \n...                ...               ...              ...            ...   \n99992          PEUGEOT              PL33                0              0   \n99993       LAND ROVER              LL27                1              0   \n99994       MITSUBISHI              PA46                0              0   \n99995  MITSUBISHI FUSO              WC2N                0              0   \n99996       LAND ROVER              PA49                0              0   \n\n       Number of Seats  Body Style   latitude  longitude  \n0                    2           8  51.216750   1.385412  \n1                    2           0  51.216750   1.385412  \n2                    2           0  51.216750   1.385412  \n3                    2           9  51.216750   1.385412  \n4                    2           9  51.216750   1.385412  \n...                ...         ...        ...        ...  \n99992                2          12  50.621900  -4.731630  \n99993                2          12  53.148526  -3.827534  \n99994                2          10  55.862667  -6.120776  \n99995                2          10  51.509081  -0.124887  \n99996                2          11  55.782269  -6.394836  \n\n[99997 rows x 8 columns]",
      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Make</th>\n      <th>Postcode District</th>\n      <th>Company/Private</th>\n      <th>Registrations</th>\n      <th>Number of Seats</th>\n      <th>Body Style</th>\n      <th>latitude</th>\n      <th>longitude</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>VAUXHALL</td>\n      <td>CT14</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n      <td>8</td>\n      <td>51.216750</td>\n      <td>1.385412</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>MAZDA</td>\n      <td>CT14</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n      <td>0</td>\n      <td>51.216750</td>\n      <td>1.385412</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>MAZDA</td>\n      <td>CT14</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n      <td>0</td>\n      <td>51.216750</td>\n      <td>1.385412</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>CITROEN</td>\n      <td>CT14</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n      <td>9</td>\n      <td>51.216750</td>\n      <td>1.385412</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>RENAULT</td>\n      <td>CT14</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n      <td>9</td>\n      <td>51.216750</td>\n      <td>1.385412</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>99992</th>\n      <td>PEUGEOT</td>\n      <td>PL33</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>12</td>\n      <td>50.621900</td>\n      <td>-4.731630</td>\n    </tr>\n    <tr>\n      <th>99993</th>\n      <td>LAND ROVER</td>\n      <td>LL27</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n      <td>12</td>\n      <td>53.148526</td>\n      <td>-3.827534</td>\n    </tr>\n    <tr>\n      <th>99994</th>\n      <td>MITSUBISHI</td>\n      <td>PA46</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>10</td>\n      <td>55.862667</td>\n      <td>-6.120776</td>\n    </tr>\n    <tr>\n      <th>99995</th>\n      <td>MITSUBISHI FUSO</td>\n      <td>WC2N</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>10</td>\n      <td>51.509081</td>\n      <td>-0.124887</td>\n    </tr>\n    <tr>\n      <th>99996</th>\n      <td>LAND ROVER</td>\n      <td>PA49</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>11</td>\n      <td>55.782269</td>\n      <td>-6.394836</td>\n    </tr>\n  </tbody>\n</table>\n<p>99997 rows Ã— 8 columns</p>\n</div>"
     },
     "execution_count": 520,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "parc = parc[['Make', 'Postcode District', 'Company/Private', 'Registrations','Number of Seats', 'Body Style', 'latitude', 'longitude']]\n",
    "parc"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2023-12-20T13:45:16.431113Z",
     "start_time": "2023-12-20T13:45:16.417360300Z"
    }
   },
   "id": "4fd9dd07cfb69136"
  },
  {
   "cell_type": "code",
   "execution_count": 521,
   "outputs": [
    {
     "data": {
      "text/plain": "   Postcode District  Company/Private  Registrations  Number of Seats  \\\n0               CT14                1              0                2   \n1               CT14                1              0                2   \n2               CT14                1              0                2   \n3               CT14                1              0                2   \n4               CT14                1              0                2   \n..               ...              ...            ...              ...   \n95               GL7                1              0                2   \n96               GL7                0              0                2   \n97               GL7                1              0                2   \n98               GL7                0              0                2   \n99               GL7                1              0                2   \n\n    Body Style   latitude  longitude  \n0            8  51.216750   1.385412  \n1            0  51.216750   1.385412  \n2            0  51.216750   1.385412  \n3            9  51.216750   1.385412  \n4            9  51.216750   1.385412  \n..         ...        ...        ...  \n95          10  51.711383  -1.896775  \n96          10  51.711383  -1.896775  \n97          10  51.711383  -1.896775  \n98          10  51.711383  -1.896775  \n99          10  51.711383  -1.896775  \n\n[100 rows x 7 columns]",
      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Postcode District</th>\n      <th>Company/Private</th>\n      <th>Registrations</th>\n      <th>Number of Seats</th>\n      <th>Body Style</th>\n      <th>latitude</th>\n      <th>longitude</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>CT14</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n      <td>8</td>\n      <td>51.216750</td>\n      <td>1.385412</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>CT14</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n      <td>0</td>\n      <td>51.216750</td>\n      <td>1.385412</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>CT14</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n      <td>0</td>\n      <td>51.216750</td>\n      <td>1.385412</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>CT14</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n      <td>9</td>\n      <td>51.216750</td>\n      <td>1.385412</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>CT14</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n      <td>9</td>\n      <td>51.216750</td>\n      <td>1.385412</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>95</th>\n      <td>GL7</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n      <td>10</td>\n      <td>51.711383</td>\n      <td>-1.896775</td>\n    </tr>\n    <tr>\n      <th>96</th>\n      <td>GL7</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>10</td>\n      <td>51.711383</td>\n      <td>-1.896775</td>\n    </tr>\n    <tr>\n      <th>97</th>\n      <td>GL7</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n      <td>10</td>\n      <td>51.711383</td>\n      <td>-1.896775</td>\n    </tr>\n    <tr>\n      <th>98</th>\n      <td>GL7</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>10</td>\n      <td>51.711383</td>\n      <td>-1.896775</td>\n    </tr>\n    <tr>\n      <th>99</th>\n      <td>GL7</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n      <td>10</td>\n      <td>51.711383</td>\n      <td>-1.896775</td>\n    </tr>\n  </tbody>\n</table>\n<p>100 rows Ã— 7 columns</p>\n</div>"
     },
     "execution_count": 521,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "filtered_data = parc[parc[\"Number of Seats\"]==2]\n",
    "filtered_data.iloc[0:100, 1:9]"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2023-12-20T13:45:16.460968800Z",
     "start_time": "2023-12-20T13:45:16.429109900Z"
    }
   },
   "id": "78a624339fe9074f"
  },
  {
   "cell_type": "code",
   "execution_count": 522,
   "outputs": [],
   "source": [
    "# Save numeric data to file:\n",
    "parc.to_excel(\n",
    "    'C:\\\\Users\\\\alvesd\\\\OneDrive - smmt.co.uk\\\\Desktop\\\\Diego_work_folder\\\\python\\\\33_Sales_Target_Region_Vehicle_Seats\\\\Parc_Numeric_Data_1.xlsx',\n",
    "    index=False)"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2023-12-20T13:45:23.727486700Z",
     "start_time": "2023-12-20T13:45:16.445965200Z"
    }
   },
   "id": "b92a07ef006dcbc5"
  },
  {
   "cell_type": "code",
   "execution_count": 523,
   "outputs": [],
   "source": [
    "# Load the data set and repalce the empty rows for NaN valeu\n",
    "parc_regression = pd.read_excel(\n",
    "    \"C:\\\\Users\\\\alvesd\\\\OneDrive - smmt.co.uk\\\\Desktop\\\\Diego_work_folder\\\\python\\\\33_Sales_Target_Region_Vehicle_Seats\\\\Parc_Numeric_Data_1.xlsx\")"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2023-12-20T13:45:29.379579400Z",
     "start_time": "2023-12-20T13:45:23.727486700Z"
    }
   },
   "id": "22c916f89535c186"
  },
  {
   "cell_type": "code",
   "execution_count": 524,
   "outputs": [],
   "source": [
    "# Turn Texts to numbers\n",
    "le = LabelEncoder()\n",
    "\n",
    "ignore = ['latitude','longitude', 'Number of Seats'] \n",
    "\n",
    "parc_regression = (parc_regression.set_index(ignore, append=True)\n",
    "        .apply(le.fit_transform)\n",
    "        .reset_index(ignore)\n",
    "       )"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2023-12-20T13:45:29.424904800Z",
     "start_time": "2023-12-20T13:45:29.380578800Z"
    }
   },
   "id": "c40955c2f582f265"
  },
  {
   "cell_type": "code",
   "execution_count": 525,
   "outputs": [
    {
     "data": {
      "text/plain": "   Postcode District  Company/Private  Registrations  Number of Seats  \\\n0               CT14                1              0                2   \n1               CT14                1              0                2   \n2               CT14                1              0                2   \n3               CT14                1              0                2   \n4               CT14                1              0                2   \n..               ...              ...            ...              ...   \n95               GL7                1              0                2   \n96               GL7                0              0                2   \n97               GL7                1              0                2   \n98               GL7                0              0                2   \n99               GL7                1              0                2   \n\n    Body Style   latitude  longitude  \n0            8  51.216750   1.385412  \n1            0  51.216750   1.385412  \n2            0  51.216750   1.385412  \n3            9  51.216750   1.385412  \n4            9  51.216750   1.385412  \n..         ...        ...        ...  \n95          10  51.711383  -1.896775  \n96          10  51.711383  -1.896775  \n97          10  51.711383  -1.896775  \n98          10  51.711383  -1.896775  \n99          10  51.711383  -1.896775  \n\n[100 rows x 7 columns]",
      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Postcode District</th>\n      <th>Company/Private</th>\n      <th>Registrations</th>\n      <th>Number of Seats</th>\n      <th>Body Style</th>\n      <th>latitude</th>\n      <th>longitude</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>CT14</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n      <td>8</td>\n      <td>51.216750</td>\n      <td>1.385412</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>CT14</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n      <td>0</td>\n      <td>51.216750</td>\n      <td>1.385412</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>CT14</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n      <td>0</td>\n      <td>51.216750</td>\n      <td>1.385412</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>CT14</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n      <td>9</td>\n      <td>51.216750</td>\n      <td>1.385412</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>CT14</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n      <td>9</td>\n      <td>51.216750</td>\n      <td>1.385412</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>95</th>\n      <td>GL7</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n      <td>10</td>\n      <td>51.711383</td>\n      <td>-1.896775</td>\n    </tr>\n    <tr>\n      <th>96</th>\n      <td>GL7</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>10</td>\n      <td>51.711383</td>\n      <td>-1.896775</td>\n    </tr>\n    <tr>\n      <th>97</th>\n      <td>GL7</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n      <td>10</td>\n      <td>51.711383</td>\n      <td>-1.896775</td>\n    </tr>\n    <tr>\n      <th>98</th>\n      <td>GL7</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>10</td>\n      <td>51.711383</td>\n      <td>-1.896775</td>\n    </tr>\n    <tr>\n      <th>99</th>\n      <td>GL7</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n      <td>10</td>\n      <td>51.711383</td>\n      <td>-1.896775</td>\n    </tr>\n  </tbody>\n</table>\n<p>100 rows Ã— 7 columns</p>\n</div>"
     },
     "execution_count": 525,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "filtered_data = parc[parc[\"Number of Seats\"]==2]\n",
    "filtered_data.iloc[0:100, 1:15]"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2023-12-20T13:45:29.440548300Z",
     "start_time": "2023-12-20T13:45:29.425905700Z"
    }
   },
   "id": "c325735f8a3ee907"
  },
  {
   "cell_type": "code",
   "execution_count": 526,
   "outputs": [],
   "source": [
    "# Prediction\n",
    "predictors = parc_regression[['Number of Seats', 'Body Style', 'Company/Private', 'Postcode District', 'Make']]\n",
    "target = parc_regression['Registrations']"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2023-12-20T13:45:29.463512900Z",
     "start_time": "2023-12-20T13:45:29.441548700Z"
    }
   },
   "id": "6e67693da84a775e"
  },
  {
   "cell_type": "code",
   "execution_count": 527,
   "outputs": [],
   "source": [
    "predictors = pd.get_dummies(predictors)\n",
    "regression_model = sm.OLS(target, predictors)"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2023-12-20T13:45:29.475602300Z",
     "start_time": "2023-12-20T13:45:29.445562900Z"
    }
   },
   "id": "7e244006ddc4128c"
  },
  {
   "cell_type": "code",
   "execution_count": 528,
   "outputs": [],
   "source": [
    "summary_table = regression_model.fit()"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2023-12-20T13:45:29.512362700Z",
     "start_time": "2023-12-20T13:45:29.457511600Z"
    }
   },
   "id": "96736b47ff7a6a87"
  },
  {
   "cell_type": "code",
   "execution_count": 529,
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:          Registrations   R-squared:                       0.014\n",
      "Model:                            OLS   Adj. R-squared:                  0.014\n",
      "Method:                 Least Squares   F-statistic:                     355.4\n",
      "Date:                Wed, 20 Dec 2023   Prob (F-statistic):          2.06e-304\n",
      "Time:                        13:45:29   Log-Likelihood:            -2.2530e+05\n",
      "No. Observations:               99997   AIC:                         4.506e+05\n",
      "Df Residuals:                   99992   BIC:                         4.507e+05\n",
      "Df Model:                           4                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "=====================================================================================\n",
      "                        coef    std err          t      P>|t|      [0.025      0.975]\n",
      "-------------------------------------------------------------------------------------\n",
      "Number of Seats       0.4010      0.021     19.482      0.000       0.361       0.441\n",
      "Body Style           -0.0008      0.003     -0.229      0.819      -0.007       0.006\n",
      "Company/Private      -0.4991      0.015    -33.099      0.000      -0.529      -0.470\n",
      "Postcode District -3.902e-05   9.02e-06     -4.325      0.000   -5.67e-05   -2.13e-05\n",
      "Make                 -0.0047      0.000    -13.632      0.000      -0.005      -0.004\n",
      "==============================================================================\n",
      "Omnibus:                   210064.800   Durbin-Watson:                   1.726\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):        876385345.818\n",
      "Skew:                          18.358   Prob(JB):                         0.00\n",
      "Kurtosis:                     460.155   Cond. No.                     4.53e+03\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
      "[2] The condition number is large, 4.53e+03. This might indicate that there are\n",
      "strong multicollinearity or other numerical problems.\n"
     ]
    }
   ],
   "source": [
    "print(summary_table.summary())"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2023-12-20T13:45:29.611502100Z",
     "start_time": "2023-12-20T13:45:29.475602300Z"
    }
   },
   "id": "cdb938f1fbcbe7cc"
  },
  {
   "cell_type": "code",
   "execution_count": 530,
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "C:\\Users\\alvesd\\OneDrive - smmt.co.uk\\Desktop\\Diego_work_folder\\python\\33_Sales_Target_Region_Vehicle_Seats\n"
     ]
    }
   ],
   "source": [
    "# Clustering Geolocation Data in Python using DBSCAN and K-Means\n",
    "import os\n",
    "\n",
    "print(os.path.abspath(\".\"))\n",
    "from collections import defaultdict\n",
    "from ipywidgets import interactive\n",
    "import hdbscan\n",
    "import folium\n",
    "import re\n",
    "import matplotlib\n",
    "# %matplotlib inline\n",
    "# %config InlineBackend.figure_format = 'svg'\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "plt.style.use('ggplot')\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from tqdm import tqdm\n",
    "from sklearn.cluster import KMeans, DBSCAN\n",
    "from sklearn.metrics import silhouette_score\n",
    "from sklearn.datasets import make_blobs\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "import folium\n",
    "from folium import plugins\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from IPython.display import display, HTML"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2023-12-20T13:45:29.611502100Z",
     "start_time": "2023-12-20T13:45:29.508529100Z"
    }
   },
   "id": "43cbcc4f26cf6226"
  },
  {
   "cell_type": "code",
   "execution_count": 531,
   "outputs": [],
   "source": [
    "# Load the data set and repalce the empty rows for NaN valeu\n",
    "parc_cluster = pd.read_excel(\n",
    "    \"C:\\\\Users\\\\alvesd\\\\OneDrive - smmt.co.uk\\\\Desktop\\\\Diego_work_folder\\\\python\\\\33_Sales_Target_Region_Vehicle_Seats\\\\Parc_Data.xlsx\")"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2023-12-20T13:45:35.052645500Z",
     "start_time": "2023-12-20T13:45:29.513361400Z"
    }
   },
   "id": "1a3f20d2dddc758c"
  },
  {
   "cell_type": "code",
   "execution_count": 532,
   "outputs": [
    {
     "data": {
      "text/plain": "        Make Company/Private  Registrations  Number of Seats     Body Style  \\\n0   VAUXHALL               P              1                2         ESTATE   \n1      MAZDA               P              1                2  2 CONVERTIBLE   \n2      MAZDA               P              1                2  2 CONVERTIBLE   \n3    CITROEN               P              1                2            MPV   \n4    RENAULT               P              1                2            MPV   \n..       ...             ...            ...              ...            ...   \n95     IVECO               P              1                2          OTHER   \n96     IVECO               C              1                2          OTHER   \n97     IVECO               P              1                2          OTHER   \n98     IVECO               C              1                2          OTHER   \n99     IVECO               P              1                2          OTHER   \n\n     latitude  longitude  \n0   51.216750   1.385412  \n1   51.216750   1.385412  \n2   51.216750   1.385412  \n3   51.216750   1.385412  \n4   51.216750   1.385412  \n..        ...        ...  \n95  51.711383  -1.896775  \n96  51.711383  -1.896775  \n97  51.711383  -1.896775  \n98  51.711383  -1.896775  \n99  51.711383  -1.896775  \n\n[100 rows x 7 columns]",
      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Make</th>\n      <th>Company/Private</th>\n      <th>Registrations</th>\n      <th>Number of Seats</th>\n      <th>Body Style</th>\n      <th>latitude</th>\n      <th>longitude</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>VAUXHALL</td>\n      <td>P</td>\n      <td>1</td>\n      <td>2</td>\n      <td>ESTATE</td>\n      <td>51.216750</td>\n      <td>1.385412</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>MAZDA</td>\n      <td>P</td>\n      <td>1</td>\n      <td>2</td>\n      <td>2 CONVERTIBLE</td>\n      <td>51.216750</td>\n      <td>1.385412</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>MAZDA</td>\n      <td>P</td>\n      <td>1</td>\n      <td>2</td>\n      <td>2 CONVERTIBLE</td>\n      <td>51.216750</td>\n      <td>1.385412</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>CITROEN</td>\n      <td>P</td>\n      <td>1</td>\n      <td>2</td>\n      <td>MPV</td>\n      <td>51.216750</td>\n      <td>1.385412</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>RENAULT</td>\n      <td>P</td>\n      <td>1</td>\n      <td>2</td>\n      <td>MPV</td>\n      <td>51.216750</td>\n      <td>1.385412</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>95</th>\n      <td>IVECO</td>\n      <td>P</td>\n      <td>1</td>\n      <td>2</td>\n      <td>OTHER</td>\n      <td>51.711383</td>\n      <td>-1.896775</td>\n    </tr>\n    <tr>\n      <th>96</th>\n      <td>IVECO</td>\n      <td>C</td>\n      <td>1</td>\n      <td>2</td>\n      <td>OTHER</td>\n      <td>51.711383</td>\n      <td>-1.896775</td>\n    </tr>\n    <tr>\n      <th>97</th>\n      <td>IVECO</td>\n      <td>P</td>\n      <td>1</td>\n      <td>2</td>\n      <td>OTHER</td>\n      <td>51.711383</td>\n      <td>-1.896775</td>\n    </tr>\n    <tr>\n      <th>98</th>\n      <td>IVECO</td>\n      <td>C</td>\n      <td>1</td>\n      <td>2</td>\n      <td>OTHER</td>\n      <td>51.711383</td>\n      <td>-1.896775</td>\n    </tr>\n    <tr>\n      <th>99</th>\n      <td>IVECO</td>\n      <td>P</td>\n      <td>1</td>\n      <td>2</td>\n      <td>OTHER</td>\n      <td>51.711383</td>\n      <td>-1.896775</td>\n    </tr>\n  </tbody>\n</table>\n<p>100 rows Ã— 7 columns</p>\n</div>"
     },
     "execution_count": 532,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "filtered_data = parc_cluster[parc_cluster[\"Number of Seats\"]==2]\n",
    "filtered_data.iloc[0:100, 1:15]"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2023-12-20T13:45:35.064147100Z",
     "start_time": "2023-12-20T13:45:35.052645500Z"
    }
   },
   "id": "aab8d9aa9d2c84dc"
  },
  {
   "cell_type": "code",
   "execution_count": 533,
   "outputs": [],
   "source": [
    "# Define colours:\n",
    "cols = ['#e6194b', '#3cb44b', '#ffe119', '#4363d8', '#f58231', '#911eb4', '#46f0f0', '#f032e6', '#bcf60c', '#fabebe',\n",
    "        '#008080', '#e6beff', '#9a6324', '#fffac8', '#800000', '#aaffc3', '#808000', '#ffd8b1', '#000075',\n",
    "        '#808080'] * 10"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2023-12-20T13:45:35.072149200Z",
     "start_time": "2023-12-20T13:45:35.065147100Z"
    }
   },
   "id": "fb81600e810fab2b"
  },
  {
   "cell_type": "code",
   "execution_count": 534,
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  Postcode District      Make Company/Private  Registrations  Number of Seats  \\\n",
      "0              CT14  VAUXHALL               P              1                2   \n",
      "1              CT14     MAZDA               P              1                2   \n",
      "2              CT14     MAZDA               P              1                2   \n",
      "3              CT14   CITROEN               P              1                2   \n",
      "4              CT14   RENAULT               P              1                2   \n",
      "\n",
      "      Body Style  latitude  longitude  \n",
      "0         ESTATE  51.21675   1.385412  \n",
      "1  2 CONVERTIBLE  51.21675   1.385412  \n",
      "2  2 CONVERTIBLE  51.21675   1.385412  \n",
      "3            MPV  51.21675   1.385412  \n",
      "4            MPV  51.21675   1.385412  \n",
      "True\n",
      "False\n",
      "Before (Nulls and Duplicates) \t:\tParc_cluster.shape = (99997, 8)\n",
      "After (Nulls and Duplicates) \t:\tParc_cluster.shape = (2730, 8)\n"
     ]
    }
   ],
   "source": [
    "print(parc_cluster.head())\n",
    "# Drop the Null and duplicates\n",
    "print(parc_cluster.duplicated(subset=['longitude', 'latitude']).values.any())\n",
    "\n",
    "print(parc_cluster.isna().values.any())\n",
    "\n",
    "print(f'Before (Nulls and Duplicates) \\t:\\tParc_cluster.shape = {parc_cluster.shape}')\n",
    "parc_cluster.dropna(inplace=True)\n",
    "parc_cluster.drop_duplicates(subset=['longitude', 'latitude'], keep='first', inplace=True)\n",
    "print(f'After (Nulls and Duplicates) \\t:\\tParc_cluster.shape = {parc_cluster.shape}')"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2023-12-20T13:45:35.174717700Z",
     "start_time": "2023-12-20T13:45:35.069148900Z"
    }
   },
   "id": "91e715be879df4b1"
  },
  {
   "cell_type": "code",
   "execution_count": 535,
   "outputs": [
    {
     "data": {
      "text/plain": "<Figure size 640x480 with 1 Axes>",
      "image/png": ""
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot the points:\n",
    "X = np.array(parc_cluster[['longitude', 'latitude']], dtype='float64')\n",
    "plt.scatter(X[:, 0], X[:, 1], alpha=0.2, s=50)\n",
    "plt.show()"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2023-12-20T13:45:35.253249700Z",
     "start_time": "2023-12-20T13:45:35.107158400Z"
    }
   },
   "id": "5740552fa871dd1d"
  },
  {
   "cell_type": "code",
   "execution_count": 536,
   "outputs": [],
   "source": [
    "m = folium.Map(location=[parc_cluster['latitude'].mean(), parc_cluster['longitude'].mean()], zoom_start=7)\n",
    "\n",
    "for _, row in parc_cluster.iterrows():\n",
    "    folium.CircleMarker(\n",
    "        location=[row.latitude, row.longitude],\n",
    "        radius=5,\n",
    "        popup=re.sub(r'[^a-zA-Z]+', '', row.Make),\n",
    "        color='#1787FE',\n",
    "        fill=True,\n",
    "        fill_color='#1787FE').add_to(m)\n",
    "m.save('seats.html')"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2023-12-20T13:45:37.336641400Z",
     "start_time": "2023-12-20T13:45:35.253249700Z"
    }
   },
   "id": "cec65ad5e2c40a65"
  },
  {
   "cell_type": "code",
   "execution_count": 537,
   "outputs": [
    {
     "data": {
      "text/plain": "<Figure size 640x480 with 1 Axes>",
      "image/png": "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xm5BfeP3+rUyHWZmZvhv/+2/kU6nMcZw7tw5giDgy1/+Mp/85CdxHN35nybRaJThcLjtttFodCS/njSU3Ofll1/mm9/85hN9bKlUotFobLut0WhoodhT9Liv18mTJwE0lByiUqlEu91mPB5POqEajQaxWEy31aZIJpPZ9vtTp07pFtuUKpVKLC4ubrttty2do0Dj7j66dOkSa2tr2/bxLl++zKVLlw7xqp5di4uL/PzP/zyrq6uT227evEkkEmF+fv4Qr+zZdu7cOSKRyLYivMuXL3PhwgV9Bz4lXn/9dT71qU9te/d98+ZNstmsBpIp9Pzzz3Pjxg08z5vcdlR/9uh3gH00NzfHq6++yle+8hVu3brFt771Lf7u7/6On/zJnzzsS3smnThxgvn5eV577TVu377N5cuXee211/ixH/uxHe8C1cGJx+P8yI/8CF/72te4du0a3/nOd/irv/orfuqnfuqwL02FXnjhBWKxGH/yJ3/CvXv3+Od//mf+/M//nI997GOHfWlqF+973/sol8v80R/9EXfu3OF//I//wbVr1/i3//bfHvalPTZjrbWHfRFH1a/8yq/wMz/zM9smujabTf7kT/6EN954g2KxyH/4D/9hx4A1dXCq1Srf+MY3ePPNNzHG8JGPfISf+7mf0yFQh2w4HPK1r32Nb3/726RSKT72sY/x7/7dvzvsy1Jb3Llzh2984xtcvXqVZDLJj//4j/Pv//2/xxhz2JemgI9//OP85m/+5mSi6/LyMn/8x3/MtWvXmJ+f55Of/CSvvPLKIV/l49NQopRSSqmpoNs3SimllJoKGkqUUkopNRU0lCillFJqKmgoUUoppdRU0FCilFJKqamgoUQppZRSU0FDiVJKKaWmgoYSpZRSSk0FDSVKKaWUmgoaSpRSSik1FTSUKKWUUmoqaChRSiml1FT4/wCHdwfqu4lmlgAAAABJRU5ErkJggg=="
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Clustering Strength\n",
    "X_blobs, _ = make_blobs(n_samples=500, centers=10,\n",
    "                        n_features=2, cluster_std=0.5, random_state=4)\n",
    "plt.scatter(X_blobs[:, 0], X_blobs[:, 1], alpha=0.2)\n",
    "plt.show()\n"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2023-12-20T13:45:37.447281700Z",
     "start_time": "2023-12-20T13:45:37.336641400Z"
    }
   },
   "id": "518f917d974af95b"
  },
  {
   "cell_type": "code",
   "execution_count": 538,
   "outputs": [
    {
     "data": {
      "text/plain": "   Postcode District  Company/Private  Registrations  Number of Seats  \\\n0               CT14                1              0                2   \n1               CT14                1              0                2   \n2               CT14                1              0                2   \n3               CT14                1              0                2   \n4               CT14                1              0                2   \n..               ...              ...            ...              ...   \n95               GL7                1              0                2   \n96               GL7                0              0                2   \n97               GL7                1              0                2   \n98               GL7                0              0                2   \n99               GL7                1              0                2   \n\n    Body Style   latitude  longitude  \n0            8  51.216750   1.385412  \n1            0  51.216750   1.385412  \n2            0  51.216750   1.385412  \n3            9  51.216750   1.385412  \n4            9  51.216750   1.385412  \n..         ...        ...        ...  \n95          10  51.711383  -1.896775  \n96          10  51.711383  -1.896775  \n97          10  51.711383  -1.896775  \n98          10  51.711383  -1.896775  \n99          10  51.711383  -1.896775  \n\n[100 rows x 7 columns]",
      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Postcode District</th>\n      <th>Company/Private</th>\n      <th>Registrations</th>\n      <th>Number of Seats</th>\n      <th>Body Style</th>\n      <th>latitude</th>\n      <th>longitude</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>CT14</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n      <td>8</td>\n      <td>51.216750</td>\n      <td>1.385412</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>CT14</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n      <td>0</td>\n      <td>51.216750</td>\n      <td>1.385412</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>CT14</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n      <td>0</td>\n      <td>51.216750</td>\n      <td>1.385412</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>CT14</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n      <td>9</td>\n      <td>51.216750</td>\n      <td>1.385412</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>CT14</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n      <td>9</td>\n      <td>51.216750</td>\n      <td>1.385412</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>95</th>\n      <td>GL7</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n      <td>10</td>\n      <td>51.711383</td>\n      <td>-1.896775</td>\n    </tr>\n    <tr>\n      <th>96</th>\n      <td>GL7</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>10</td>\n      <td>51.711383</td>\n      <td>-1.896775</td>\n    </tr>\n    <tr>\n      <th>97</th>\n      <td>GL7</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n      <td>10</td>\n      <td>51.711383</td>\n      <td>-1.896775</td>\n    </tr>\n    <tr>\n      <th>98</th>\n      <td>GL7</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>10</td>\n      <td>51.711383</td>\n      <td>-1.896775</td>\n    </tr>\n    <tr>\n      <th>99</th>\n      <td>GL7</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n      <td>10</td>\n      <td>51.711383</td>\n      <td>-1.896775</td>\n    </tr>\n  </tbody>\n</table>\n<p>100 rows Ã— 7 columns</p>\n</div>"
     },
     "execution_count": 538,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Load the data set and repalce the empty rows for NaN valeu\n",
    "Parc_Numeric_Data = pd.read_excel(\n",
    "    \"C:\\\\Users\\\\alvesd\\\\OneDrive - smmt.co.uk\\\\Desktop\\\\Diego_work_folder\\\\python\\\\33_Sales_Target_Region_Vehicle_Seats\\\\Parc_Numeric_Data_1.xlsx\")\n",
    "filtered_data = Parc_Numeric_Data[Parc_Numeric_Data[\"Number of Seats\"]==2]\n",
    "filtered_data.iloc[0:100, 1:15]"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2023-12-20T13:45:43.129775200Z",
     "start_time": "2023-12-20T13:45:37.445280300Z"
    }
   },
   "id": "f1b53497e5ceaf52"
  },
  {
   "cell_type": "code",
   "execution_count": 539,
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True\n"
     ]
    }
   ],
   "source": [
    "# Drop the Null and duplicates\n",
    "print(Parc_Numeric_Data.duplicated(subset=['longitude', 'latitude']).values.any())"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2023-12-20T13:45:43.139948400Z",
     "start_time": "2023-12-20T13:45:43.129775200Z"
    }
   },
   "id": "558c0be2b28d30e2"
  },
  {
   "cell_type": "code",
   "execution_count": 540,
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "False\n"
     ]
    }
   ],
   "source": [
    "print(Parc_Numeric_Data.isna().values.any())"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2023-12-20T13:45:43.147876200Z",
     "start_time": "2023-12-20T13:45:43.140950100Z"
    }
   },
   "id": "dc47fe6386da1daf"
  },
  {
   "cell_type": "code",
   "execution_count": 541,
   "outputs": [
    {
     "data": {
      "text/plain": "   Postcode District  Company/Private  Registrations  Number of Seats  \\\n0               CT14                1              0                2   \n1               CT14                1              0                2   \n2               CT14                1              0                2   \n3               CT14                1              0                2   \n4               CT14                1              0                2   \n5               CT14                0              0                2   \n6               CT14                1              0                2   \n7               CT14                0              0                2   \n8               CT14                0              0                2   \n9               CT14                1              0                2   \n10              CT14                0              0                2   \n11              CT14                0              0                2   \n12              CT14                1              0                2   \n13              CT14                0              0                2   \n14              CT14                1              0                2   \n15              CT14                1              0                2   \n16              CT14                1              0                2   \n17              CT14                1              0                2   \n18              CT14                0              0                2   \n19              CT14                0              0                2   \n20              CT14                0              0                2   \n21              CT14                1              0                2   \n22              CT14                1              0                2   \n23              CT14                0              0                2   \n24              CT14                0              0                2   \n25              CT14                0              0                2   \n26              CT14                1              0                2   \n27              EX22                1              0                2   \n28              EX22                1              0                2   \n29              EX22                1              0                2   \n30              EX22                0              0                2   \n31              EX22                1              0                2   \n32              EX22                1              0                2   \n33              EX22                0              0                2   \n34              EX22                0              0                2   \n35              EX22                0              0                2   \n36              EX22                1              0                2   \n37              EX22                1              0                2   \n38              EX22                0              0                2   \n39              EX22                0              0                2   \n40              EX22                1              0                2   \n41              EX22                1              0                2   \n42              EX22                0              0                2   \n43              EX22                1              0                2   \n44              EX22                0              0                2   \n45              EX22                0              0                2   \n46              EX22                1              0                2   \n47              EX22                0              0                2   \n48              EX22                1              0                2   \n49              EX22                1              0                2   \n\n    Body Style   latitude  longitude  \n0            8  51.216750   1.385412  \n1            0  51.216750   1.385412  \n2            0  51.216750   1.385412  \n3            9  51.216750   1.385412  \n4            9  51.216750   1.385412  \n5            9  51.216750   1.385412  \n6           10  51.216750   1.385412  \n7            9  51.216750   1.385412  \n8           10  51.216750   1.385412  \n9           10  51.216750   1.385412  \n10          10  51.216750   1.385412  \n11          10  51.216750   1.385412  \n12          10  51.216750   1.385412  \n13          10  51.216750   1.385412  \n14          12  51.216750   1.385412  \n15          12  51.216750   1.385412  \n16          10  51.216750   1.385412  \n17          10  51.216750   1.385412  \n18          10  51.216750   1.385412  \n19          11  51.216750   1.385412  \n20          10  51.216750   1.385412  \n21          12  51.216750   1.385412  \n22          12  51.216750   1.385412  \n23          10  51.216750   1.385412  \n24          11  51.216750   1.385412  \n25          12  51.216750   1.385412  \n26          12  51.216750   1.385412  \n27           8  50.827797  -4.368072  \n28           0  50.827797  -4.368072  \n29           9  50.827797  -4.368072  \n30           9  50.827797  -4.368072  \n31          10  50.827797  -4.368072  \n32          10  50.827797  -4.368072  \n33          10  50.827797  -4.368072  \n34          10  50.827797  -4.368072  \n35          10  50.827797  -4.368072  \n36          10  50.827797  -4.368072  \n37          10  50.827797  -4.368072  \n38          10  50.827797  -4.368072  \n39          10  50.827797  -4.368072  \n40          10  50.827797  -4.368072  \n41          10  50.827797  -4.368072  \n42          10  50.827797  -4.368072  \n43          10  50.827797  -4.368072  \n44          10  50.827797  -4.368072  \n45          10  50.827797  -4.368072  \n46          12  50.827797  -4.368072  \n47          10  50.827797  -4.368072  \n48          11  50.827797  -4.368072  \n49          10  50.827797  -4.368072  ",
      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Postcode District</th>\n      <th>Company/Private</th>\n      <th>Registrations</th>\n      <th>Number of Seats</th>\n      <th>Body Style</th>\n      <th>latitude</th>\n      <th>longitude</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>CT14</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n      <td>8</td>\n      <td>51.216750</td>\n      <td>1.385412</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>CT14</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n      <td>0</td>\n      <td>51.216750</td>\n      <td>1.385412</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>CT14</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n      <td>0</td>\n      <td>51.216750</td>\n      <td>1.385412</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>CT14</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n      <td>9</td>\n      <td>51.216750</td>\n      <td>1.385412</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>CT14</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n      <td>9</td>\n      <td>51.216750</td>\n      <td>1.385412</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>CT14</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>9</td>\n      <td>51.216750</td>\n      <td>1.385412</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>CT14</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n      <td>10</td>\n      <td>51.216750</td>\n      <td>1.385412</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>CT14</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>9</td>\n      <td>51.216750</td>\n      <td>1.385412</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>CT14</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>10</td>\n      <td>51.216750</td>\n      <td>1.385412</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>CT14</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n      <td>10</td>\n      <td>51.216750</td>\n      <td>1.385412</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>CT14</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>10</td>\n      <td>51.216750</td>\n      <td>1.385412</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>CT14</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>10</td>\n      <td>51.216750</td>\n      <td>1.385412</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>CT14</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n      <td>10</td>\n      <td>51.216750</td>\n      <td>1.385412</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>CT14</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>10</td>\n      <td>51.216750</td>\n      <td>1.385412</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>CT14</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n      <td>12</td>\n      <td>51.216750</td>\n      <td>1.385412</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>CT14</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n      <td>12</td>\n      <td>51.216750</td>\n      <td>1.385412</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>CT14</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n      <td>10</td>\n      <td>51.216750</td>\n      <td>1.385412</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>CT14</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n      <td>10</td>\n      <td>51.216750</td>\n      <td>1.385412</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>CT14</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>10</td>\n      <td>51.216750</td>\n      <td>1.385412</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>CT14</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>11</td>\n      <td>51.216750</td>\n      <td>1.385412</td>\n    </tr>\n    <tr>\n      <th>20</th>\n      <td>CT14</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>10</td>\n      <td>51.216750</td>\n      <td>1.385412</td>\n    </tr>\n    <tr>\n      <th>21</th>\n      <td>CT14</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n      <td>12</td>\n      <td>51.216750</td>\n      <td>1.385412</td>\n    </tr>\n    <tr>\n      <th>22</th>\n      <td>CT14</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n      <td>12</td>\n      <td>51.216750</td>\n      <td>1.385412</td>\n    </tr>\n    <tr>\n      <th>23</th>\n      <td>CT14</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>10</td>\n      <td>51.216750</td>\n      <td>1.385412</td>\n    </tr>\n    <tr>\n      <th>24</th>\n      <td>CT14</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>11</td>\n      <td>51.216750</td>\n      <td>1.385412</td>\n    </tr>\n    <tr>\n      <th>25</th>\n      <td>CT14</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>12</td>\n      <td>51.216750</td>\n      <td>1.385412</td>\n    </tr>\n    <tr>\n      <th>26</th>\n      <td>CT14</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n      <td>12</td>\n      <td>51.216750</td>\n      <td>1.385412</td>\n    </tr>\n    <tr>\n      <th>27</th>\n      <td>EX22</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n      <td>8</td>\n      <td>50.827797</td>\n      <td>-4.368072</td>\n    </tr>\n    <tr>\n      <th>28</th>\n      <td>EX22</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n      <td>0</td>\n      <td>50.827797</td>\n      <td>-4.368072</td>\n    </tr>\n    <tr>\n      <th>29</th>\n      <td>EX22</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n      <td>9</td>\n      <td>50.827797</td>\n      <td>-4.368072</td>\n    </tr>\n    <tr>\n      <th>30</th>\n      <td>EX22</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>9</td>\n      <td>50.827797</td>\n      <td>-4.368072</td>\n    </tr>\n    <tr>\n      <th>31</th>\n      <td>EX22</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n      <td>10</td>\n      <td>50.827797</td>\n      <td>-4.368072</td>\n    </tr>\n    <tr>\n      <th>32</th>\n      <td>EX22</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n      <td>10</td>\n      <td>50.827797</td>\n      <td>-4.368072</td>\n    </tr>\n    <tr>\n      <th>33</th>\n      <td>EX22</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>10</td>\n      <td>50.827797</td>\n      <td>-4.368072</td>\n    </tr>\n    <tr>\n      <th>34</th>\n      <td>EX22</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>10</td>\n      <td>50.827797</td>\n      <td>-4.368072</td>\n    </tr>\n    <tr>\n      <th>35</th>\n      <td>EX22</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>10</td>\n      <td>50.827797</td>\n      <td>-4.368072</td>\n    </tr>\n    <tr>\n      <th>36</th>\n      <td>EX22</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n      <td>10</td>\n      <td>50.827797</td>\n      <td>-4.368072</td>\n    </tr>\n    <tr>\n      <th>37</th>\n      <td>EX22</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n      <td>10</td>\n      <td>50.827797</td>\n      <td>-4.368072</td>\n    </tr>\n    <tr>\n      <th>38</th>\n      <td>EX22</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>10</td>\n      <td>50.827797</td>\n      <td>-4.368072</td>\n    </tr>\n    <tr>\n      <th>39</th>\n      <td>EX22</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>10</td>\n      <td>50.827797</td>\n      <td>-4.368072</td>\n    </tr>\n    <tr>\n      <th>40</th>\n      <td>EX22</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n      <td>10</td>\n      <td>50.827797</td>\n      <td>-4.368072</td>\n    </tr>\n    <tr>\n      <th>41</th>\n      <td>EX22</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n      <td>10</td>\n      <td>50.827797</td>\n      <td>-4.368072</td>\n    </tr>\n    <tr>\n      <th>42</th>\n      <td>EX22</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>10</td>\n      <td>50.827797</td>\n      <td>-4.368072</td>\n    </tr>\n    <tr>\n      <th>43</th>\n      <td>EX22</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n      <td>10</td>\n      <td>50.827797</td>\n      <td>-4.368072</td>\n    </tr>\n    <tr>\n      <th>44</th>\n      <td>EX22</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>10</td>\n      <td>50.827797</td>\n      <td>-4.368072</td>\n    </tr>\n    <tr>\n      <th>45</th>\n      <td>EX22</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>10</td>\n      <td>50.827797</td>\n      <td>-4.368072</td>\n    </tr>\n    <tr>\n      <th>46</th>\n      <td>EX22</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n      <td>12</td>\n      <td>50.827797</td>\n      <td>-4.368072</td>\n    </tr>\n    <tr>\n      <th>47</th>\n      <td>EX22</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>10</td>\n      <td>50.827797</td>\n      <td>-4.368072</td>\n    </tr>\n    <tr>\n      <th>48</th>\n      <td>EX22</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n      <td>11</td>\n      <td>50.827797</td>\n      <td>-4.368072</td>\n    </tr>\n    <tr>\n      <th>49</th>\n      <td>EX22</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n      <td>10</td>\n      <td>50.827797</td>\n      <td>-4.368072</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
     },
     "execution_count": 541,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "filtered_data = Parc_Numeric_Data[Parc_Numeric_Data[\"Number of Seats\"]==2]\n",
    "filtered_data.iloc[0:50, 1:15]"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2023-12-20T13:45:43.215462100Z",
     "start_time": "2023-12-20T13:45:43.146876900Z"
    }
   },
   "id": "3c9bb5f368a3baa0"
  },
  {
   "cell_type": "code",
   "execution_count": 542,
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Before (Nulls and Duplicates) \t:\tParc_cluster.shape = (99997, 8)\n",
      "After (Nulls and Duplicates) \t:\tParc_cluster.shape = (2730, 8)\n"
     ]
    }
   ],
   "source": [
    "print(f'Before (Nulls and Duplicates) \\t:\\tParc_cluster.shape = {Parc_Numeric_Data.shape}')\n",
    "Parc_Numeric_Data.dropna(inplace=True)\n",
    "Parc_Numeric_Data.dropna()\n",
    "Parc_Numeric_Data.drop_duplicates(subset=['longitude', 'latitude'], keep='last', inplace=True) \n",
    "Parc_Numeric_Data.drop_duplicates(subset=['longitude', 'latitude'], keep='first', inplace=True)\n",
    "print(f'After (Nulls and Duplicates) \\t:\\tParc_cluster.shape = {Parc_Numeric_Data.shape}')\n",
    "Parc_Numeric_Data.to_excel(\n",
    "    'C:\\\\Users\\\\alvesd\\\\OneDrive - smmt.co.uk\\\\Desktop\\\\Diego_work_folder\\\\python\\\\33_Sales_Target_Region_Vehicle_Seats\\\\Parc_Numeric_Data_2.xlsx',\n",
    "    index=False)\n",
    "Parc_Numeric_Data = pd.read_excel(\n",
    "    'C:\\\\Users\\\\alvesd\\\\OneDrive - smmt.co.uk\\\\Desktop\\\\Diego_work_folder\\\\python\\\\33_Sales_Target_Region_Vehicle_Seats\\\\Parc_Numeric_Data_2.xlsx')"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2023-12-20T13:45:43.614443700Z",
     "start_time": "2023-12-20T13:45:43.161447600Z"
    }
   },
   "id": "7ac4ecb9261538f5"
  },
  {
   "cell_type": "code",
   "execution_count": 543,
   "outputs": [
    {
     "data": {
      "text/plain": "   Postcode District  Company/Private  Registrations  Number of Seats  \\\n0               CT14                1              0                2   \n1               EX22                1              0                2   \n2                GL7                1              0                2   \n3                SN6                1              0                2   \n4                TF2                1              0                2   \n..               ...              ...            ...              ...   \n95              WS11                0              0                2   \n96               CT6                0              0                2   \n97              BT63                1              0                2   \n98              OX18                1              0                2   \n99               CO4                1              0                2   \n\n    Body Style   latitude  longitude  \n0           12  51.216750   1.385412  \n1           12  50.827797  -4.368072  \n2           12  51.711383  -1.896775  \n3            7  51.621519  -1.740957  \n4           12  52.700233  -2.439930  \n..         ...        ...        ...  \n95          10  52.688043  -2.017389  \n96          11  51.364411   1.129523  \n97          12  54.407214  -6.390639  \n98          12  51.762807  -1.591667  \n99          12  51.909141   0.919683  \n\n[100 rows x 7 columns]",
      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Postcode District</th>\n      <th>Company/Private</th>\n      <th>Registrations</th>\n      <th>Number of Seats</th>\n      <th>Body Style</th>\n      <th>latitude</th>\n      <th>longitude</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>CT14</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n      <td>12</td>\n      <td>51.216750</td>\n      <td>1.385412</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>EX22</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n      <td>12</td>\n      <td>50.827797</td>\n      <td>-4.368072</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>GL7</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n      <td>12</td>\n      <td>51.711383</td>\n      <td>-1.896775</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>SN6</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n      <td>7</td>\n      <td>51.621519</td>\n      <td>-1.740957</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>TF2</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n      <td>12</td>\n      <td>52.700233</td>\n      <td>-2.439930</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>95</th>\n      <td>WS11</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>10</td>\n      <td>52.688043</td>\n      <td>-2.017389</td>\n    </tr>\n    <tr>\n      <th>96</th>\n      <td>CT6</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>11</td>\n      <td>51.364411</td>\n      <td>1.129523</td>\n    </tr>\n    <tr>\n      <th>97</th>\n      <td>BT63</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n      <td>12</td>\n      <td>54.407214</td>\n      <td>-6.390639</td>\n    </tr>\n    <tr>\n      <th>98</th>\n      <td>OX18</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n      <td>12</td>\n      <td>51.762807</td>\n      <td>-1.591667</td>\n    </tr>\n    <tr>\n      <th>99</th>\n      <td>CO4</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n      <td>12</td>\n      <td>51.909141</td>\n      <td>0.919683</td>\n    </tr>\n  </tbody>\n</table>\n<p>100 rows Ã— 7 columns</p>\n</div>"
     },
     "execution_count": 543,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "filtered_data = Parc_Numeric_Data[Parc_Numeric_Data[\"Number of Seats\"]==2]\n",
    "filtered_data.iloc[0:100, 1:15]"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2023-12-20T13:45:43.626446Z",
     "start_time": "2023-12-20T13:45:43.614443700Z"
    }
   },
   "id": "b3ab8b3dbdb84b37"
  },
  {
   "cell_type": "code",
   "execution_count": 544,
   "outputs": [],
   "source": [
    "Parc_Numeric_Data_1 = Parc_Numeric_Data.head(500)"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2023-12-20T13:45:43.635110Z",
     "start_time": "2023-12-20T13:45:43.628446400Z"
    }
   },
   "id": "7ae873c44a8c387d"
  },
  {
   "cell_type": "code",
   "execution_count": 545,
   "outputs": [
    {
     "data": {
      "text/plain": "               Make Postcode District  Company/Private  Registrations  \\\n0            NISSAN              CT14                1              0   \n1        LAND ROVER              EX22                1              0   \n2    RENAULT TRUCKS               GL7                1              0   \n3              FIAT               SN6                1              0   \n4        LAND ROVER               TF2                1              0   \n..              ...               ...              ...            ...   \n495            FORD               GU6                1              0   \n496            FORD               HP3                0              0   \n497      LAND ROVER               HX6                0              0   \n498     UNSPECIFIED              LE16                1              0   \n499       CHEVROLET              LE17                1              0   \n\n     Number of Seats  Body Style   latitude  longitude  \n0                  2          12  51.216750   1.385412  \n1                  2          12  50.827797  -4.368072  \n2                  2          12  51.711383  -1.896775  \n3                  2           7  51.621519  -1.740957  \n4                  2          12  52.700233  -2.439930  \n..               ...         ...        ...        ...  \n495                2          11  51.140550  -0.484194  \n496                2          12  51.735945  -0.470705  \n497                2          12  53.696878  -1.927434  \n498                2           7  52.486107  -0.895993  \n499                2          11  52.467587  -1.177829  \n\n[500 rows x 8 columns]",
      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Make</th>\n      <th>Postcode District</th>\n      <th>Company/Private</th>\n      <th>Registrations</th>\n      <th>Number of Seats</th>\n      <th>Body Style</th>\n      <th>latitude</th>\n      <th>longitude</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>NISSAN</td>\n      <td>CT14</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n      <td>12</td>\n      <td>51.216750</td>\n      <td>1.385412</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>LAND ROVER</td>\n      <td>EX22</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n      <td>12</td>\n      <td>50.827797</td>\n      <td>-4.368072</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>RENAULT TRUCKS</td>\n      <td>GL7</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n      <td>12</td>\n      <td>51.711383</td>\n      <td>-1.896775</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>FIAT</td>\n      <td>SN6</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n      <td>7</td>\n      <td>51.621519</td>\n      <td>-1.740957</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>LAND ROVER</td>\n      <td>TF2</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n      <td>12</td>\n      <td>52.700233</td>\n      <td>-2.439930</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>495</th>\n      <td>FORD</td>\n      <td>GU6</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n      <td>11</td>\n      <td>51.140550</td>\n      <td>-0.484194</td>\n    </tr>\n    <tr>\n      <th>496</th>\n      <td>FORD</td>\n      <td>HP3</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>12</td>\n      <td>51.735945</td>\n      <td>-0.470705</td>\n    </tr>\n    <tr>\n      <th>497</th>\n      <td>LAND ROVER</td>\n      <td>HX6</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>12</td>\n      <td>53.696878</td>\n      <td>-1.927434</td>\n    </tr>\n    <tr>\n      <th>498</th>\n      <td>UNSPECIFIED</td>\n      <td>LE16</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n      <td>7</td>\n      <td>52.486107</td>\n      <td>-0.895993</td>\n    </tr>\n    <tr>\n      <th>499</th>\n      <td>CHEVROLET</td>\n      <td>LE17</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n      <td>11</td>\n      <td>52.467587</td>\n      <td>-1.177829</td>\n    </tr>\n  </tbody>\n</table>\n<p>500 rows Ã— 8 columns</p>\n</div>"
     },
     "execution_count": 545,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Parc_Numeric_Data_1.dropna()"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2023-12-20T13:45:43.643691Z",
     "start_time": "2023-12-20T13:45:43.632108800Z"
    }
   },
   "id": "a51e4da455da79c3"
  },
  {
   "cell_type": "code",
   "execution_count": 546,
   "outputs": [
    {
     "data": {
      "text/plain": "<Figure size 640x480 with 1 Axes>",
      "image/png": ""
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": "<Figure size 640x480 with 1 Axes>",
      "image/png": "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"
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-0.0007068965066784779\n"
     ]
    }
   ],
   "source": [
    "class_predictions = Parc_Numeric_Data_1['Company/Private']\n",
    "unique_clusters = np.unique(class_predictions)\n",
    "for unique_clusters in unique_clusters:\n",
    "    X = X_blobs[class_predictions == unique_clusters]\n",
    "    plt.scatter(X[:, 0], X[:, 1], alpha=0.2, c=cols[unique_clusters])\n",
    "    plt.show()\n",
    "\n",
    "print(silhouette_score(X_blobs, class_predictions))"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2023-12-20T13:45:43.888268200Z",
     "start_time": "2023-12-20T13:45:43.641689600Z"
    }
   },
   "id": "a7098ec4b611651f"
  },
  {
   "cell_type": "code",
   "execution_count": 547,
   "outputs": [
    {
     "data": {
      "text/plain": "<Figure size 640x480 with 1 Axes>",
      "image/png": "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KQAAwJYIKQAAwJYs+xXkgwcPasmSJX6X5efnKykpyaf9+eef1759+7zaFi5cqLFjx1o1LAAAEKYsCyk5OTl65ZVXvNpeeOEF9erVy29AkSSn06mHHnpI11xzjaetZ8+eVg0JAACEMctCSkxMjBITEz339+zZo+PHj+vFF1/027+pqUmVlZXKysryehwAAIDUSXNSmpubtWnTJt11113q06eP3z7l5eUyDEMDBw7sjCEAAIAwZ9melPN9/PHHqqur0y233BKwT1lZmRISErRy5UodOnRIAwYMUG5urkaPHh308xmGcTnDDbg+q9drJ9QYGagxMlBjZOgONUqhrdMwTdPsaOfGxkbV1NT4XZaYmKgePXpIkp588kllZ2frvvvuC7iuzZs366233tIDDzygjIwM7d27V1u3btWzzz6rrKysIMsAAACRJqg9KcXFxQHP4FmwYIGuu+46nT59WoWFhbr//vvbXdcPf/hD3XrrrerVq5ckKSMjQ19//bXee++9oEJKVVWVmpubO15EBxiGodTUVFVUVCiIDBdWqDEyUGNkoMbI0B1qlC6/zpiYGCUnJ3esbzArHjlypAoKCtrt8+WXXyolJUVXXnllu/2ioqI8AeWctLQ0lZaWBjMkSeq0F4NpmhH9QpOoMVJQY2SgxsjQHWqUQlOn5RNni4uLlZOTc9F+q1atUn5+vlfb0aNHNXjwYKuHBAAAwpDlIaW0tFRpaWl+l7lcLjU2NkqSxo0bp927d+vDDz9URUWFtmzZosLCwnYn2wIAgO7D8rN7Tp8+HfCCbHPmzNG8efM0efJkjR8/Xg888IC2bt2q6upqpaWlafHixUpJSbF6SAAAIAxZHlJeeOGFgMsunM8yZcoUTZkyxeohAACACMAPDAIAAFsipAAAAFsipAAAAFsipAAAAFsipAAAAFsipAAAAFsipAAAAFsipAAAAFsipAAAAFsipAAAAFsipAAAAFsipAAAAFsipAAAAFsipAAAAFuK6eoBAAAAG2mRjOrWm1okRUtmUutN0aEdCiEFAAC0apGMI5LRKKnHd81GlaTTkpmlkCYHDvcAAABJbXtQLggoUut9o6Ft70oIEVIAAICkthByYUA5J56QAgAAukrLZS63GCEFAAC0utjE2BBPnCWkAAAASW1n8NQHWHi2bXkIEVIAAICktlONHZLOXrDgrGTGhT6kcAoyAABoFd12mvGF10lJ4TopAACgq0VL5sDWW1fjcA8AALAlQgoAALAlQgoAALAlQgoAALAlQgoAALAlQgoAALAlQgoAALAlQgoAALAlQgoAALAlQgoAALClsL8sfkxM55XQmeu2C2qMDNQYGagxMnSHGqVLrzOYxxmmaZqX9CwAAACdiMM9AADAlggpAADAlggpAADAlggpAADAlggpAADAlggpAADAlggpAADAlggpAADAlggpAADAlggpAADAlrrHDwwEYJqmnn32Wd14442aPHmyp/3vf/+71qxZo6+++kq9e/fWPffco3/+538OuJ6vvvpKr732mk6cOKHs7Gz9/Oc/18CBA0NQQcccPHhQS5Ys8bssPz9fSUlJPu3PP/+89u3b59W2cOFCjR07tlPGaIVvvvlGCxcu9GrLzMzUsmXLAvZfu3atjh8/rvT0dM2ePVuZmZmhGOolq6ur0+uvv67PP/9cbrdbY8aM0cyZM9WzZ0+//devX6+//vWvXm2zZs3SLbfcEorhdlhjY6NeffVVffrpp3I4HJo6daqmTp3qt284bjdJqqmp0fr163XgwAE5HA5NnDhRP/7xj+VwOHz6huP7T5L27t2rFStWeLWNHz9ejz32mE9fu39uBvLBBx8oPz/fp90wDG3atMmn/fHHH9exY8e82lasWKErr7yy08Z4OZqampSXl6dZs2Zp5MiRkqTKykqtWbNGRUVFSkpK0syZM3XttdcGXMeePXu0adMmnTp1Stdee63mzp2rPn36XNJ4um1Icbvd2rBhg7766ivdeOONXstWrVqlpqYmPfPMMyopKdGaNWs0aNAgDR061Gc91dXVWr58uXJzczVq1Cht2bJFy5cv1/Lly2UYRqjKaVdOTo5eeeUVr7YXXnhBvXr18htQJMnpdOqhhx7SNddc42kL9EVoF06nUxkZGVq8eLGnLTo62m/f+vp6LV26VDfeeKPmzZund999V0uXLtXKlSvVo0ePUA05aGvXrtWJEye0aNEiSdIf//hHrVmzRo8++qjf/k6nUz/5yU+8Qnh8fHwohhqUjRs36uuvv9ZvfvMbVVdXa9WqVUpOTtaECRO8+oXrdjNNU7/73e/Uq1cvPfXUU6qtrdXLL7+sqKgoTZ8+3ad/OL7/pNZxjx07VnPnzvW0xcbG+vQLh8/NQCZOnKhRo0Z57jc3N+up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"
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": "<Figure size 640x480 with 1 Axes>",
      "image/png": ""
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": "<Figure size 640x480 with 1 Axes>",
      "image/png": ""
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": "<Figure size 640x480 with 1 Axes>",
      "image/png": ""
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": "<Figure size 640x480 with 1 Axes>",
      "image/png": ""
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-0.08217496393459112\n"
     ]
    }
   ],
   "source": [
    "class_predictions = Parc_Numeric_Data_1['Body Style']\n",
    "unique_clusters = np.unique(class_predictions)\n",
    "for unique_clusters in unique_clusters:\n",
    "    X = X_blobs[class_predictions == unique_clusters]\n",
    "    plt.scatter(X[:, 0], X[:, 1], alpha=0.2, c=cols[unique_clusters])\n",
    "    plt.show()\n",
    "\n",
    "print(silhouette_score(X_blobs, class_predictions))"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2023-12-20T13:45:44.431421900Z",
     "start_time": "2023-12-20T13:45:43.859255Z"
    }
   },
   "id": "a5a81735967cad66"
  },
  {
   "cell_type": "code",
   "execution_count": 548,
   "outputs": [],
   "source": [
    "X_blobs, _ = make_blobs(n_samples=1000, centers=50, \n",
    "                        n_features=2, cluster_std=1, random_state=4)"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2023-12-20T13:45:44.432422500Z",
     "start_time": "2023-12-20T13:45:44.419126400Z"
    }
   },
   "id": "7bda63f163bdb825"
  },
  {
   "cell_type": "code",
   "execution_count": 549,
   "outputs": [],
   "source": [
    "data = defaultdict(dict)\n",
    "for x in range(1,21):\n",
    "    model = KMeans(n_clusters=3, random_state=17, \n",
    "                   max_iter=x, n_init=1).fit(X_blobs)\n",
    "    \n",
    "    data[x]['class_predictions'] = model.predict(X_blobs)\n",
    "    data[x]['centroids'] = model.cluster_centers_\n",
    "    data[x]['unique_classes'] = np.unique(class_predictions)"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2023-12-20T13:45:44.530197900Z",
     "start_time": "2023-12-20T13:45:44.425420Z"
    }
   },
   "id": "33af3b5be5dc6d72"
  },
  {
   "cell_type": "code",
   "execution_count": 550,
   "outputs": [],
   "source": [
    "def f(x):\n",
    "    class_predictions = data[x]['class_predictions']\n",
    "    centroids = data[x]['centroids']\n",
    "    unique_classes = data[x]['unique_classes']\n",
    "    for unique_class in unique_classes:\n",
    "            plt.scatter(X_blobs[class_predictions==unique_class][:,0], \n",
    "                        X_blobs[class_predictions==unique_class][:,1], \n",
    "                        alpha=0.3, c=cols[unique_class])\n",
    "    plt.scatter(centroids[:,0], centroids[:,1], s=200, c='#000000', marker='v')\n",
    "    plt.ylim([-15,15]); plt.xlim([-15,15])\n",
    "    plt.title('How K-Means Clusters')"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2023-12-20T13:45:44.539071800Z",
     "start_time": "2023-12-20T13:45:44.532198600Z"
    }
   },
   "id": "e0df5f5a3c0270f3"
  },
  {
   "cell_type": "code",
   "execution_count": 551,
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\alvesd\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sklearn\\cluster\\_kmeans.py:1412: FutureWarning:\n",
      "\n",
      "The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
      "\n"
     ]
    }
   ],
   "source": [
    "interactive_plot = interactive(f, x=(1, 20))\n",
    "output = interactive_plot.children[-1]\n",
    "output.layout.height = '350px'\n",
    "interactive_plot\n",
    "X = np.array(Parc_Numeric_Data[['longitude', 'latitude']], dtype='float64')\n",
    "k = 70\n",
    "model = KMeans(n_clusters=k, random_state=17).fit(X)\n",
    "class_predictions = model.predict(X)\n",
    "Parc_Numeric_Data[f'CLUSTER_kmeans{k}'] = class_predictions\n",
    "# Save numeric data to file:\n",
    "Parc_Numeric_Data.to_excel(\n",
    "    'C:\\\\Users\\\\alvesd\\\\OneDrive - smmt.co.uk\\\\Desktop\\\\Diego_work_folder\\\\python\\\\33_Sales_Target_Region_Vehicle_Seats\\\\Parc_Numeric_Data_1.xlsx',\n",
    "    index=False)"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2023-12-20T13:45:45.578793600Z",
     "start_time": "2023-12-20T13:45:44.537071400Z"
    }
   },
   "id": "4995cffb25ebee96"
  },
  {
   "cell_type": "code",
   "execution_count": 552,
   "outputs": [
    {
     "data": {
      "text/plain": "  Postcode District  Company/Private  Registrations  Number of Seats  \\\n0              CT14                1              0                2   \n1              EX22                1              0                2   \n2               GL7                1              0                2   \n3               SN6                1              0                2   \n4               TF2                1              0                2   \n\n   Body Style   latitude  longitude  CLUSTER_kmeans70  \n0          12  51.216750   1.385412                12  \n1          12  50.827797  -4.368072                28  \n2          12  51.711383  -1.896775                13  \n3           7  51.621519  -1.740957                13  \n4          12  52.700233  -2.439930                45  ",
      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Postcode District</th>\n      <th>Company/Private</th>\n      <th>Registrations</th>\n      <th>Number of Seats</th>\n      <th>Body Style</th>\n      <th>latitude</th>\n      <th>longitude</th>\n      <th>CLUSTER_kmeans70</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>CT14</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n      <td>12</td>\n      <td>51.216750</td>\n      <td>1.385412</td>\n      <td>12</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>EX22</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n      <td>12</td>\n      <td>50.827797</td>\n      <td>-4.368072</td>\n      <td>28</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>GL7</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n      <td>12</td>\n      <td>51.711383</td>\n      <td>-1.896775</td>\n      <td>13</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>SN6</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n      <td>7</td>\n      <td>51.621519</td>\n      <td>-1.740957</td>\n      <td>13</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>TF2</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n      <td>12</td>\n      <td>52.700233</td>\n      <td>-2.439930</td>\n      <td>45</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
     },
     "execution_count": 552,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "filtered_data = Parc_Numeric_Data[Parc_Numeric_Data[\"Number of Seats\"]==2]\n",
    "filtered_data.iloc[0:5, 1:9]"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2023-12-20T13:45:45.587455600Z",
     "start_time": "2023-12-20T13:45:45.578793600Z"
    }
   },
   "id": "f5e6d1557235e11f"
  },
  {
   "cell_type": "code",
   "execution_count": 553,
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "             Make Postcode District  Company/Private  Registrations  \\\n",
      "0          NISSAN              CT14                1              0   \n",
      "1      LAND ROVER              EX22                1              0   \n",
      "2  RENAULT TRUCKS               GL7                1              0   \n",
      "3            FIAT               SN6                1              0   \n",
      "4      LAND ROVER               TF2                1              0   \n",
      "\n",
      "   Number of Seats  Body Style   latitude  longitude  CLUSTER_kmeans70  \n",
      "0                2          12  51.216750   1.385412                12  \n",
      "1                2          12  50.827797  -4.368072                28  \n",
      "2                2          12  51.711383  -1.896775                13  \n",
      "3                2           7  51.621519  -1.740957                13  \n",
      "4                2          12  52.700233  -2.439930                45  \n"
     ]
    },
    {
     "data": {
      "text/plain": "   Postcode District  Company/Private  Registrations  Number of Seats  \\\n0               CT14                1              0                2   \n1               EX22                1              0                2   \n2                GL7                1              0                2   \n3                SN6                1              0                2   \n4                TF2                1              0                2   \n..               ...              ...            ...              ...   \n95              WS11                0              0                2   \n96               CT6                0              0                2   \n97              BT63                1              0                2   \n98              OX18                1              0                2   \n99               CO4                1              0                2   \n\n    Body Style   latitude  longitude  CLUSTER_kmeans70  \n0           12  51.216750   1.385412                12  \n1           12  50.827797  -4.368072                28  \n2           12  51.711383  -1.896775                13  \n3            7  51.621519  -1.740957                13  \n4           12  52.700233  -2.439930                45  \n..         ...        ...        ...               ...  \n95          10  52.688043  -2.017389                25  \n96          11  51.364411   1.129523                12  \n97          12  54.407214  -6.390639                22  \n98          12  51.762807  -1.591667                13  \n99          12  51.909141   0.919683                44  \n\n[100 rows x 8 columns]",
      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Postcode District</th>\n      <th>Company/Private</th>\n      <th>Registrations</th>\n      <th>Number of Seats</th>\n      <th>Body Style</th>\n      <th>latitude</th>\n      <th>longitude</th>\n      <th>CLUSTER_kmeans70</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>CT14</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n      <td>12</td>\n      <td>51.216750</td>\n      <td>1.385412</td>\n      <td>12</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>EX22</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n      <td>12</td>\n      <td>50.827797</td>\n      <td>-4.368072</td>\n      <td>28</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>GL7</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n      <td>12</td>\n      <td>51.711383</td>\n      <td>-1.896775</td>\n      <td>13</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>SN6</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n      <td>7</td>\n      <td>51.621519</td>\n      <td>-1.740957</td>\n      <td>13</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>TF2</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n      <td>12</td>\n      <td>52.700233</td>\n      <td>-2.439930</td>\n      <td>45</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>95</th>\n      <td>WS11</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>10</td>\n      <td>52.688043</td>\n      <td>-2.017389</td>\n      <td>25</td>\n    </tr>\n    <tr>\n      <th>96</th>\n      <td>CT6</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>11</td>\n      <td>51.364411</td>\n      <td>1.129523</td>\n      <td>12</td>\n    </tr>\n    <tr>\n      <th>97</th>\n      <td>BT63</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n      <td>12</td>\n      <td>54.407214</td>\n      <td>-6.390639</td>\n      <td>22</td>\n    </tr>\n    <tr>\n      <th>98</th>\n      <td>OX18</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n      <td>12</td>\n      <td>51.762807</td>\n      <td>-1.591667</td>\n      <td>13</td>\n    </tr>\n    <tr>\n      <th>99</th>\n      <td>CO4</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n      <td>12</td>\n      <td>51.909141</td>\n      <td>0.919683</td>\n      <td>44</td>\n    </tr>\n  </tbody>\n</table>\n<p>100 rows Ã— 8 columns</p>\n</div>"
     },
     "execution_count": 553,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Parc_Numeric_Data_1 = pd.read_excel('C:\\\\Users\\\\alvesd\\\\OneDrive - smmt.co.uk\\\\Desktop\\\\Diego_work_folder\\\\python\\\\33_Sales_Target_Region_Vehicle_Seats\\\\Parc_Numeric_Data_1.xlsx')\n",
    "Parc_Numeric_Data = Parc_Numeric_Data_1.dropna()\n",
    "Parc_Numeric_Data = Parc_Numeric_Data.reset_index(drop=True)\n",
    "print(Parc_Numeric_Data.head())\n",
    "filtered_data = Parc_Numeric_Data[Parc_Numeric_Data[\"Number of Seats\"]==2]\n",
    "filtered_data.iloc[0:100, 1:15]"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2023-12-20T13:45:45.783689600Z",
     "start_time": "2023-12-20T13:45:45.587455600Z"
    }
   },
   "id": "736ac4747a76724"
  },
  {
   "cell_type": "code",
   "execution_count": 554,
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "             Make  Number of Seats   latitude  longitude\n",
      "0          NISSAN                2  51.216750   1.385412\n",
      "1      LAND ROVER                2  50.827797  -4.368072\n",
      "2  RENAULT TRUCKS                2  51.711383  -1.896775\n",
      "3            FIAT                2  51.621519  -1.740957\n",
      "4      LAND ROVER                2  52.700233  -2.439930\n"
     ]
    }
   ],
   "source": [
    "Parc_Numeric_Data = Parc_Numeric_Data[['Make', 'Number of Seats', 'latitude', 'longitude']]\n",
    "print(Parc_Numeric_Data.head())"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2023-12-20T13:45:45.788707500Z",
     "start_time": "2023-12-20T13:45:45.782688600Z"
    }
   },
   "id": "94d7bd98e22d2334"
  },
  {
   "cell_type": "markdown",
   "source": [
    "# Clustering Analysis: https://medium.com/codex/clustering-geographic-data-on-an-interactive-map-in-python-60a5d13d6452"
   ],
   "metadata": {
    "collapsed": false
   },
   "id": "a1def4e85928ef46"
  },
  {
   "cell_type": "code",
   "execution_count": 555,
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\alvesd\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sklearn\\cluster\\_kmeans.py:1412: FutureWarning:\n",
      "\n",
      "The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
      "\n",
      "C:\\Users\\alvesd\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sklearn\\cluster\\_kmeans.py:1412: FutureWarning:\n",
      "\n",
      "The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
      "\n",
      "C:\\Users\\alvesd\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sklearn\\cluster\\_kmeans.py:1412: FutureWarning:\n",
      "\n",
      "The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
      "\n",
      "C:\\Users\\alvesd\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sklearn\\cluster\\_kmeans.py:1412: FutureWarning:\n",
      "\n",
      "The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
      "\n",
      "C:\\Users\\alvesd\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sklearn\\cluster\\_kmeans.py:1412: FutureWarning:\n",
      "\n",
      "The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
      "\n",
      "C:\\Users\\alvesd\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sklearn\\cluster\\_kmeans.py:1412: FutureWarning:\n",
      "\n",
      "The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
      "\n",
      "C:\\Users\\alvesd\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sklearn\\cluster\\_kmeans.py:1412: FutureWarning:\n",
      "\n",
      "The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
      "\n",
      "C:\\Users\\alvesd\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sklearn\\cluster\\_kmeans.py:1412: FutureWarning:\n",
      "\n",
      "The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
      "\n",
      "C:\\Users\\alvesd\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sklearn\\cluster\\_kmeans.py:1412: FutureWarning:\n",
      "\n",
      "The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
      "\n",
      "C:\\Users\\alvesd\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sklearn\\cluster\\_kmeans.py:1412: FutureWarning:\n",
      "\n",
      "The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/plain": "<Figure size 640x480 with 1 Axes>",
      "image/png": ""
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.cluster import KMeans\n",
    "from scipy.spatial import ConvexHull\n",
    "import folium\n",
    "X = Parc_Numeric_Data.iloc[:, 1:4].values\n",
    "# Using the elbow method to find the optimal number of clusters\n",
    "wcss = []\n",
    "for i in range(1, 11):\n",
    "    kmeans = KMeans(n_clusters = i, init = 'k-means++', random_state = 42)\n",
    "    kmeans.fit(X)\n",
    "    wcss.append(kmeans.inertia_)\n",
    "plt.plot(range(1, 11), wcss)\n",
    "plt.title('The Elbow Method')\n",
    "plt.xlabel('Number of clusters')\n",
    "plt.ylabel('WCSS')\n",
    "plt.show()"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2023-12-20T13:45:46.640253600Z",
     "start_time": "2023-12-20T13:45:45.788707500Z"
    }
   },
   "id": "5643d71e12d1f1b2"
  },
  {
   "cell_type": "code",
   "execution_count": 556,
   "outputs": [],
   "source": [
    "# Load the data set and repalce the empty rows for NaN valeu\n",
    "parc_1 = pd.read_excel(\n",
    "    \"C:\\\\Users\\\\alvesd\\\\OneDrive - smmt.co.uk\\\\Desktop\\\\Diego_work_folder\\\\python\\\\33_Sales_Target_Region_Vehicle_Seats\\\\Parc_Numeric_Data_1.xlsx\")"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2023-12-20T13:45:46.816243600Z",
     "start_time": "2023-12-20T13:45:46.639209400Z"
    }
   },
   "id": "c9f3aa45c6c2223b"
  },
  {
   "cell_type": "code",
   "execution_count": 557,
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The Column Header : ['Make', 'Postcode District', 'Company/Private', 'Registrations', 'Number of Seats', 'Body Style', 'latitude', 'longitude', 'CLUSTER_kmeans70']\n"
     ]
    }
   ],
   "source": [
    "# Print Headers\n",
    "#print(parc.head(5))\n",
    "# Print columns headers:\n",
    "column_headers = list(parc_1.columns.values)\n",
    "print(\"The Column Header :\", column_headers)"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2023-12-20T13:45:46.819764800Z",
     "start_time": "2023-12-20T13:45:46.816243600Z"
    }
   },
   "id": "27c4e7e8b7613b76"
  },
  {
   "cell_type": "code",
   "execution_count": 558,
   "outputs": [],
   "source": [
    "parc_1 = parc_1[['Postcode District', 'Make', 'Number of Seats', 'Company/Private', 'Registrations', 'Body Style', 'latitude', 'longitude']]"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2023-12-20T13:45:46.828352800Z",
     "start_time": "2023-12-20T13:45:46.818765Z"
    }
   },
   "id": "fe7e8d7e06eeb145"
  },
  {
   "cell_type": "code",
   "execution_count": 559,
   "outputs": [
    {
     "data": {
      "text/plain": "  Postcode District            Make  Number of Seats  Company/Private  \\\n0              CT14          NISSAN                2                1   \n1              EX22      LAND ROVER                2                1   \n2               GL7  RENAULT TRUCKS                2                1   \n3               SN6            FIAT                2                1   \n4               TF2      LAND ROVER                2                1   \n\n   Registrations  Body Style   latitude  longitude  \n0              0          12  51.216750   1.385412  \n1              0          12  50.827797  -4.368072  \n2              0          12  51.711383  -1.896775  \n3              0           7  51.621519  -1.740957  \n4              0          12  52.700233  -2.439930  ",
      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Postcode District</th>\n      <th>Make</th>\n      <th>Number of Seats</th>\n      <th>Company/Private</th>\n      <th>Registrations</th>\n      <th>Body Style</th>\n      <th>latitude</th>\n      <th>longitude</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>CT14</td>\n      <td>NISSAN</td>\n      <td>2</td>\n      <td>1</td>\n      <td>0</td>\n      <td>12</td>\n      <td>51.216750</td>\n      <td>1.385412</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>EX22</td>\n      <td>LAND ROVER</td>\n      <td>2</td>\n      <td>1</td>\n      <td>0</td>\n      <td>12</td>\n      <td>50.827797</td>\n      <td>-4.368072</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>GL7</td>\n      <td>RENAULT TRUCKS</td>\n      <td>2</td>\n      <td>1</td>\n      <td>0</td>\n      <td>12</td>\n      <td>51.711383</td>\n      <td>-1.896775</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>SN6</td>\n      <td>FIAT</td>\n      <td>2</td>\n      <td>1</td>\n      <td>0</td>\n      <td>7</td>\n      <td>51.621519</td>\n      <td>-1.740957</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>TF2</td>\n      <td>LAND ROVER</td>\n      <td>2</td>\n      <td>1</td>\n      <td>0</td>\n      <td>12</td>\n      <td>52.700233</td>\n      <td>-2.439930</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
     },
     "execution_count": 559,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "parc_1.head()"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2023-12-20T13:45:46.836476300Z",
     "start_time": "2023-12-20T13:45:46.825351200Z"
    }
   },
   "id": "7d0feddbfe7fddc6"
  },
  {
   "cell_type": "code",
   "execution_count": 560,
   "outputs": [],
   "source": [
    "# Turn Texts to numbers\n",
    "le = LabelEncoder()\n",
    "\n",
    "ignore = ['latitude','longitude', 'Postcode District', 'Make', 'Number of Seats'] \n",
    "\n",
    "parc_1 = (parc_1.set_index(ignore, append=True)\n",
    "        .apply(le.fit_transform)\n",
    "        .reset_index(ignore)\n",
    "       )"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2023-12-20T13:45:46.871540Z",
     "start_time": "2023-12-20T13:45:46.833475900Z"
    }
   },
   "id": "970177286dcf5398"
  },
  {
   "cell_type": "code",
   "execution_count": 561,
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Before (Nulls and Duplicates) \t:\tParc_cluster.shape = (2730, 8)\n",
      "After (Nulls and Duplicates) \t:\tParc_cluster.shape = (2730, 8)\n"
     ]
    }
   ],
   "source": [
    "print(f'Before (Nulls and Duplicates) \\t:\\tParc_cluster.shape = {parc_1.shape}')\n",
    "parc_1.dropna(inplace=True)\n",
    "parc_1.drop_duplicates(subset=['longitude', 'latitude'], keep='last', inplace=True) \n",
    "#Parc_Numeric_Data.drop_duplicates(subset=['longitude', 'latitude'], keep='first', inplace=True)\n",
    "print(f'After (Nulls and Duplicates) \\t:\\tParc_cluster.shape = {parc_1.shape}')\n",
    "parc_1.to_excel(\n",
    "    'C:\\\\Users\\\\alvesd\\\\OneDrive - smmt.co.uk\\\\Desktop\\\\Diego_work_folder\\\\python\\\\33_Sales_Target_Region_Vehicle_Seats\\\\Parc_Numeric_Data_2.xlsx',\n",
    "    index=False)\n",
    "parc_2 = pd.read_excel(\n",
    "    'C:\\\\Users\\\\alvesd\\\\OneDrive - smmt.co.uk\\\\Desktop\\\\Diego_work_folder\\\\python\\\\33_Sales_Target_Region_Vehicle_Seats\\\\Parc_Numeric_Data_2.xlsx')\n",
    "parc_2 = parc_2.set_index(\"Postcode District\")"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2023-12-20T13:45:47.269843900Z",
     "start_time": "2023-12-20T13:45:46.844532200Z"
    }
   },
   "id": "64bb8e076e2c267f"
  },
  {
   "cell_type": "code",
   "execution_count": 562,
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\alvesd\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sklearn\\cluster\\_kmeans.py:1412: FutureWarning:\n",
      "\n",
      "The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Training the K-Means model regarding your elbow method or business logic groups\n",
    "kmeans = KMeans(n_clusters = 5, init = 'k-means++', random_state = 42)\n",
    "y_kmeans = kmeans.fit_predict(X)\n",
    "# Map data back to df\n",
    "parc_2['cluster'] = y_kmeans +1 # to step up to group 0 to 4\n",
    "#Parc_Numeric_Data = Parc_Numeric_Data[Parc_Numeric_Data[\"Number of Seats\"]==4]\n",
    "#print(parc_2.head())\n",
    "# Save numeric data to file:\n",
    "parc_2.to_csv(\n",
    "    'C:\\\\Users\\\\alvesd\\\\OneDrive - smmt.co.uk\\\\Desktop\\\\Diego_work_folder\\\\python\\\\33_Sales_Target_Region_Vehicle_Seats\\\\Parc_Numeric_Data_2.csv',\n",
    "    index=True)"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2023-12-20T13:45:47.366070400Z",
     "start_time": "2023-12-20T13:45:47.269843900Z"
    }
   },
   "id": "acdd74b4ff455d93"
  },
  {
   "cell_type": "code",
   "execution_count": 563,
   "outputs": [
    {
     "data": {
      "text/plain": "                    latitude  longitude            Make  Number of Seats  \\\nPostcode District                                                          \nCT14               51.216750   1.385412          NISSAN                2   \nEX22               50.827797  -4.368072      LAND ROVER                2   \nGL7                51.711383  -1.896775  RENAULT TRUCKS                2   \nSN6                51.621519  -1.740957            FIAT                2   \nTF2                52.700233  -2.439930      LAND ROVER                2   \n\n                   Company/Private  Registrations  Body Style  cluster  \nPostcode District                                                       \nCT14                             1              0           8        1  \nEX22                             1              0           8        5  \nGL7                              1              0           8        5  \nSN6                              1              0           3        1  \nTF2                              1              0           8        3  ",
      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>latitude</th>\n      <th>longitude</th>\n      <th>Make</th>\n      <th>Number of Seats</th>\n      <th>Company/Private</th>\n      <th>Registrations</th>\n      <th>Body Style</th>\n      <th>cluster</th>\n    </tr>\n    <tr>\n      <th>Postcode District</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>CT14</th>\n      <td>51.216750</td>\n      <td>1.385412</td>\n      <td>NISSAN</td>\n      <td>2</td>\n      <td>1</td>\n      <td>0</td>\n      <td>8</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>EX22</th>\n      <td>50.827797</td>\n      <td>-4.368072</td>\n      <td>LAND ROVER</td>\n      <td>2</td>\n      <td>1</td>\n      <td>0</td>\n      <td>8</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>GL7</th>\n      <td>51.711383</td>\n      <td>-1.896775</td>\n      <td>RENAULT TRUCKS</td>\n      <td>2</td>\n      <td>1</td>\n      <td>0</td>\n      <td>8</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>SN6</th>\n      <td>51.621519</td>\n      <td>-1.740957</td>\n      <td>FIAT</td>\n      <td>2</td>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>TF2</th>\n      <td>52.700233</td>\n      <td>-2.439930</td>\n      <td>LAND ROVER</td>\n      <td>2</td>\n      <td>1</td>\n      <td>0</td>\n      <td>8</td>\n      <td>3</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
     },
     "execution_count": 563,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "parc_2.head()"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2023-12-20T13:45:47.376645700Z",
     "start_time": "2023-12-20T13:45:47.367070700Z"
    }
   },
   "id": "18ff42b5febaf6e0"
  },
  {
   "cell_type": "code",
   "execution_count": 564,
   "outputs": [],
   "source": [
    "parc_2 = pd.read_csv('C:\\\\Users\\\\alvesd\\\\OneDrive - smmt.co.uk\\\\Desktop\\\\Diego_work_folder\\\\python\\\\33_Sales_Target_Region_Vehicle_Seats\\\\Parc_Numeric_Data_2.csv')"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2023-12-20T13:45:47.389649900Z",
     "start_time": "2023-12-20T13:45:47.374645200Z"
    }
   },
   "id": "d52c13a41f484ec5"
  },
  {
   "cell_type": "code",
   "execution_count": 565,
   "outputs": [
    {
     "data": {
      "text/plain": "  Postcode District   latitude  longitude            Make  Number of Seats  \\\n0              CT14  51.216750   1.385412          NISSAN                2   \n1              EX22  50.827797  -4.368072      LAND ROVER                2   \n2               GL7  51.711383  -1.896775  RENAULT TRUCKS                2   \n3               SN6  51.621519  -1.740957            FIAT                2   \n4               TF2  52.700233  -2.439930      LAND ROVER                2   \n\n   Company/Private  Registrations  Body Style  cluster  \n0                1              0           8        1  \n1                1              0           8        5  \n2                1              0           8        5  \n3                1              0           3        1  \n4                1              0           8        3  ",
      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Postcode District</th>\n      <th>latitude</th>\n      <th>longitude</th>\n      <th>Make</th>\n      <th>Number of Seats</th>\n      <th>Company/Private</th>\n      <th>Registrations</th>\n      <th>Body Style</th>\n      <th>cluster</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>CT14</td>\n      <td>51.216750</td>\n      <td>1.385412</td>\n      <td>NISSAN</td>\n      <td>2</td>\n      <td>1</td>\n      <td>0</td>\n      <td>8</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>EX22</td>\n      <td>50.827797</td>\n      <td>-4.368072</td>\n      <td>LAND ROVER</td>\n      <td>2</td>\n      <td>1</td>\n      <td>0</td>\n      <td>8</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>GL7</td>\n      <td>51.711383</td>\n      <td>-1.896775</td>\n      <td>RENAULT TRUCKS</td>\n      <td>2</td>\n      <td>1</td>\n      <td>0</td>\n      <td>8</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>SN6</td>\n      <td>51.621519</td>\n      <td>-1.740957</td>\n      <td>FIAT</td>\n      <td>2</td>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>TF2</td>\n      <td>52.700233</td>\n      <td>-2.439930</td>\n      <td>LAND ROVER</td>\n      <td>2</td>\n      <td>1</td>\n      <td>0</td>\n      <td>8</td>\n      <td>3</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
     },
     "execution_count": 565,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "parc_2.head()"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2023-12-20T13:45:47.436239900Z",
     "start_time": "2023-12-20T13:45:47.389649900Z"
    }
   },
   "id": "7cbb78ecfd32b67b"
  },
  {
   "cell_type": "code",
   "execution_count": 566,
   "outputs": [],
   "source": [
    "# Plot data to map\n",
    "# Create the map object called m which is the base layer of the map\n",
    "m = folium.Map(location=[parc_2['latitude'].mean(), parc_2['longitude'].mean()],\n",
    "               tiles='CartoDB positron',\n",
    "               zoom_start=7)\n",
    "# Create layers based on your clustering groups\n",
    "layer1 = folium.FeatureGroup(name= '<u><b>Cluster 1</b></u>',show= True)\n",
    "m.add_child(layer1)\n",
    "layer2 = folium.FeatureGroup(name= '<u><b>Cluster 2</b></u>',show= True)\n",
    "m.add_child(layer2)\n",
    "layer3 = folium.FeatureGroup(name= '<u><b>Cluster 3</b></u>',show= True)\n",
    "m.add_child(layer3)\n",
    "layer4 = folium.FeatureGroup(name= '<u><b>Cluster 4</b></u>',show= True)\n",
    "m.add_child(layer4)\n",
    "layer5 = folium.FeatureGroup(name= '<u><b>Cluster 5</b></u>',show= True)\n",
    "m.add_child(layer5)\n",
    "#draw marker class for each group by adding CSS class\n",
    "my_symbol_css_class = \"\"\" <style>\n",
    ".fa-g1:before {\n",
    "    font-family: Arial; \n",
    "    font-weight: bold;\n",
    "    font-size: 12px;\n",
    "    color: black;\n",
    "    background-color:white;\n",
    "    border-radius: 10px; \n",
    "    white-space: pre;\n",
    "    content: ' G<=1 ';\n",
    "    }\n",
    ".fa-g2:before {\n",
    "    font-family: Arial; \n",
    "    font-weight: bold;\n",
    "    font-size: 12px;\n",
    "    color: black;\n",
    "    background-color:white;\n",
    "    border-radius: 10px; \n",
    "    white-space: pre;\n",
    "    content: ' G=2 ';\n",
    "    }\n",
    ".fa-g3:before {\n",
    "    font-family: Arial; \n",
    "    font-weight: bold;\n",
    "    font-size: 12px;\n",
    "    color: black;\n",
    "    background-color:white;\n",
    "    border-radius: 10px; \n",
    "    white-space: pre;\n",
    "    content: ' G=3 ';\n",
    "    }\n",
    ".fa-g4:before {\n",
    "    font-family: Arial; \n",
    "    font-weight: bold;\n",
    "    font-size: 12px;\n",
    "    color: black;\n",
    "    background-color:white;\n",
    "    border-radius: 10px; \n",
    "    white-space: pre;\n",
    "    content: ' G>=4 ';\n",
    "    }\n",
    ".fa-g5:before {\n",
    "    font-family: Arial; \n",
    "    font-weight: bold;\n",
    "    font-size: 12px;\n",
    "    color: black;\n",
    "    background-color:white;\n",
    "    border-radius: 10px; \n",
    "    white-space: pre;\n",
    "    content: ' G>=5 ';\n",
    "    }\n",
    ".fa-g1bad:before {\n",
    "    font-family: Arial; \n",
    "    font-weight: bold;\n",
    "    font-size: 12px;\n",
    "    color: black;\n",
    "    background-color:white;\n",
    "    border-radius: 10px; \n",
    "    white-space: pre;\n",
    "    content: ' G<=1 ';\n",
    "    }\n",
    ".fa-g2bad:before {\n",
    "    font-family: Arial; \n",
    "    font-weight: bold;\n",
    "    font-size: 12px;\n",
    "    color: black;\n",
    "    background-color:white;\n",
    "    border-radius: 10px; \n",
    "    white-space: pre;\n",
    "    content: ' G=2 ';\n",
    "    }\n",
    ".fa-g3bad:before {\n",
    "    font-family: Arial; \n",
    "    font-weight: bold;\n",
    "    font-size: 12px;\n",
    "    color: black;\n",
    "    background-color:white;\n",
    "    border-radius: 10px; \n",
    "    white-space: pre;\n",
    "    content: ' G=3 ';\n",
    "    }\n",
    ".fa-g4bad:before {\n",
    "    font-family: Arial; \n",
    "    font-weight: bold;\n",
    "    font-size: 12px;\n",
    "    color: black;\n",
    "    background-color:white;\n",
    "    border-radius: 10px; \n",
    "    white-space: pre;\n",
    "    content: ' G>=4 ';\n",
    "    }\n",
    ".fa-g5bad:before {\n",
    "    font-family: Arial; \n",
    "    font-weight: bold;\n",
    "    font-size: 12px;\n",
    "    color: black;\n",
    "    background-color:white;\n",
    "    border-radius: 10px; \n",
    "    white-space: pre;\n",
    "    content: ' G>=5 ';\n",
    "    }\n",
    "</style>\n",
    "\"\"\"\n",
    "# the below is just add above  CSS class to folium root map      \n",
    "m.get_root().html.add_child(folium.Element(my_symbol_css_class))\n",
    "# then we just create marker and specific your css class in icon like below\n",
    "for index, row in parc_2.iterrows():\n",
    "    if row['cluster'] == 1 and row['Number of Seats'] == 2:\n",
    "        color = 'black'\n",
    "        fa_symbol = 'fa-g1'\n",
    "        lay = layer1\n",
    "    elif row['cluster'] == 1 and row['Number of Seats'] == 2:\n",
    "        color = 'black'\n",
    "        fa_symbol = 'fa-g1bad'\n",
    "        lay = layer1\n",
    "    elif row['cluster'] == 2 and row['Number of Seats'] == 2:\n",
    "        color = 'purple'\n",
    "        fa_symbol = 'fa-g2'\n",
    "        lay = layer2\n",
    "    elif row['cluster'] == 2 and row['Number of Seats'] == 2:\n",
    "        color = 'purple'\n",
    "        fa_symbol = 'fa-g2bad'\n",
    "        lay = layer2\n",
    "    elif row['cluster'] == 3 and row['Number of Seats'] == 2:\n",
    "        color = 'orange'\n",
    "        fa_symbol = 'fa-g3'\n",
    "        lay = layer3\n",
    "    elif row['cluster'] == 3 and row['Number of Seats'] == 2:\n",
    "        color = 'orange'\n",
    "        fa_symbol = 'fa-g3bad'\n",
    "        lay = layer3\n",
    "    elif row['cluster'] == 4 and row['Number of Seats'] == 2:\n",
    "        color = 'blue'\n",
    "        fa_symbol = 'fa-g4'\n",
    "        lay = layer4\n",
    "    elif row['cluster'] == 4 and row['Number of Seats'] == 2:\n",
    "        color = 'blue'\n",
    "        fa_symbol = 'fa-g4bad'\n",
    "        lay = layer4\n",
    "    elif row['cluster'] == 5 and row['Number of Seats'] > 2:\n",
    "        color = 'green'\n",
    "        fa_symbol = 'fa-g5'\n",
    "        lay = layer5\n",
    "    elif row['cluster'] == 5 and row['Number of Seats'] > 2:\n",
    "        color = 'green'\n",
    "        fa_symbol = 'fa-g5bad'\n",
    "        lay = layer5\n",
    "    else:\n",
    "        color = 'green'\n",
    "        fa_symbol = 'fa-g5bad'\n",
    "        lay = layer5\n",
    "        \n",
    "    folium.Marker(\n",
    "        location=[row['latitude'], row['longitude']],\n",
    "        title = row['Make']+ ' Number of Seats: {}'.format(str(row['Number of Seats'])),\n",
    "        popup = row['Make']+ ' Number of Seats: {}'.format(str(row['Number of Seats'])),\n",
    "        icon= folium.Icon(color=color, icon=fa_symbol, prefix='fa')).add_to(lay)"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2023-12-20T13:45:47.677640800Z",
     "start_time": "2023-12-20T13:45:47.401230600Z"
    }
   },
   "id": "a4e3974ef6240881"
  },
  {
   "cell_type": "code",
   "execution_count": 567,
   "outputs": [],
   "source": [
    "from scipy.spatial import ConvexHull\n",
    "#draw cluster each group\n",
    "#flat line to group path\n",
    "#prepare layer and color for each group\n",
    "layer_list = [layer1,layer2,layer3,layer4,layer5]\n",
    "color_list = ['black','purple','orange','blue','green']\n",
    "for g in parc_2['cluster'].unique():\n",
    "# this part we apply ConvexHull theory to find the boundary of each group\n",
    "    # first, we have to cut the lat lon in each group \n",
    "    latlon_cut =parc_2[parc_2['cluster']==g].iloc[:, 1:3]\n",
    "    # second, scipy already provides  the great function for ConvexHull\n",
    "    # we just throw our dataframe with lat lon in this function\n",
    "    hull = ConvexHull(latlon_cut.values)\n",
    "    # and with magic, we can have new lat lon boundary of each group\n",
    "    Lat = latlon_cut.values[hull.vertices,0]\n",
    "    Long = latlon_cut.values[hull.vertices,1] \n",
    "    # the we create dataframe boundary and convert it to list of lat lon \n",
    "    # for plotting polygon in folium\n",
    "    cluster = pd.DataFrame({'latitude':Lat,'longitude':Long })       \n",
    "    area = list(zip(cluster['latitude'],cluster['longitude']))\n",
    "    # plot polygon\n",
    "    list_index = g-1 # minus 1 to get the same index \n",
    "    lay_cluster = layer_list[list_index ] \n",
    "    folium.Polygon(locations=area,\n",
    "        color=color_list[list_index],\n",
    "        weight=2,\n",
    "        fill=True,\n",
    "        fill_opacity=0.1,\n",
    "        opacity=0.8).add_to(lay_cluster) \n",
    "            \n",
    "# to let the map have selectd layer1 layer2 you created\n",
    "folium.LayerControl(collapsed=False,position= 'bottomright').add_to(m)\n",
    "# save it to html then we can send the file to our colleagues\n",
    "m.save('C:\\\\Users\\\\alvesd\\\\OneDrive - smmt.co.uk\\\\Desktop\\\\Diego_work_folder\\\\python\\\\33_Sales_Target_Region_Vehicle_Seats\\\\Tillett.html')"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2023-12-20T13:45:50.161128800Z",
     "start_time": "2023-12-20T13:45:47.679641100Z"
    }
   },
   "id": "419956fd671dd0ca"
  },
  {
   "cell_type": "markdown",
   "source": [
    "# Done up to here!!!"
   ],
   "metadata": {
    "collapsed": false
   },
   "id": "458fdb83472b5e31"
  },
  {
   "cell_type": "code",
   "execution_count": 568,
   "outputs": [
    {
     "data": {
      "application/vnd.plotly.v1+json": {
       "data": [
        {
         "marker": {
          "color": "DarkOrange"
         },
         "mode": "lines+markers",
         "name": "Audi Q5",
         "x": [
          "2020-01-01",
          "2020-01-02",
          "2020-01-03",
          "2020-01-04",
          "2020-01-05",
          "2020-01-06",
          "2020-01-07",
          "2020-01-08",
          "2020-01-09",
          "2020-01-10"
         ],
         "y": [
          12.38,
          11.06,
          9.34,
          13.78,
          10.23,
          11.55,
          12.02,
          12.66,
          13.23,
          14.22
         ],
         "type": "scatter"
        },
        {
         "marker": {
          "color": "Crimson"
         },
         "mode": "lines+markers",
         "name": "Merucedes GLE",
         "x": [
          "2020-01-01",
          "2020-01-02",
          "2020-01-03",
          "2020-01-04",
          "2020-01-05",
          "2020-01-06",
          "2020-01-07",
          "2020-01-08",
          "2020-01-09",
          "2020-01-10"
         ],
         "y": [
          9.87,
          8.06,
          9.34,
          9.78,
          10.23,
          9.55,
          10.02,
          9.66,
          8.23,
          9.22
         ],
         "type": "scatter"
        },
        {
         "marker": {
          "color": "RebeccaPurple"
         },
         "mode": "lines+markers",
         "name": "BMW X5",
         "x": [
          "2020-01-01",
          "2020-01-02",
          "2020-01-03",
          "2020-01-04",
          "2020-01-05",
          "2020-01-06",
          "2020-01-07",
          "2020-01-08",
          "2020-01-09",
          "2020-01-10"
         ],
         "y": [
          11.87,
          14.06,
          11.34,
          10.78,
          11.23,
          12.57,
          14.02,
          13.86,
          13.63,
          11.22
         ],
         "type": "scatter"
        }
       ],
       "layout": {
        "template": {
         "data": {
          "histogram2dcontour": [
           {
            "type": "histogram2dcontour",
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0.0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1.0,
              "#f0f921"
             ]
            ]
           }
          ],
          "choropleth": [
           {
            "type": "choropleth",
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            }
           }
          ],
          "histogram2d": [
           {
            "type": "histogram2d",
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0.0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1.0,
              "#f0f921"
             ]
            ]
           }
          ],
          "heatmap": [
           {
            "type": "heatmap",
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0.0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1.0,
              "#f0f921"
             ]
            ]
           }
          ],
          "heatmapgl": [
           {
            "type": "heatmapgl",
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0.0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1.0,
              "#f0f921"
             ]
            ]
           }
          ],
          "contourcarpet": [
           {
            "type": "contourcarpet",
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            }
           }
          ],
          "contour": [
           {
            "type": "contour",
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0.0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1.0,
              "#f0f921"
             ]
            ]
           }
          ],
          "surface": [
           {
            "type": "surface",
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0.0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1.0,
              "#f0f921"
             ]
            ]
           }
          ],
          "mesh3d": [
           {
            "type": "mesh3d",
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            }
           }
          ],
          "scatter": [
           {
            "marker": {
             "line": {
              "color": "#283442"
             }
            },
            "type": "scatter"
           }
          ],
          "parcoords": [
           {
            "type": "parcoords",
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            }
           }
          ],
          "scatterpolargl": [
           {
            "type": "scatterpolargl",
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            }
           }
          ],
          "bar": [
           {
            "error_x": {
             "color": "#f2f5fa"
            },
            "error_y": {
             "color": "#f2f5fa"
            },
            "marker": {
             "line": {
              "color": "rgb(17,17,17)",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "bar"
           }
          ],
          "scattergeo": [
           {
            "type": "scattergeo",
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            }
           }
          ],
          "scatterpolar": [
           {
            "type": "scatterpolar",
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            }
           }
          ],
          "histogram": [
           {
            "marker": {
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "histogram"
           }
          ],
          "scattergl": [
           {
            "marker": {
             "line": {
              "color": "#283442"
             }
            },
            "type": "scattergl"
           }
          ],
          "scatter3d": [
           {
            "type": "scatter3d",
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            }
           }
          ],
          "scattermapbox": [
           {
            "type": "scattermapbox",
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            }
           }
          ],
          "scatterternary": [
           {
            "type": "scatterternary",
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            }
           }
          ],
          "scattercarpet": [
           {
            "type": "scattercarpet",
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            }
           }
          ],
          "carpet": [
           {
            "aaxis": {
             "endlinecolor": "#A2B1C6",
             "gridcolor": "#506784",
             "linecolor": "#506784",
             "minorgridcolor": "#506784",
             "startlinecolor": "#A2B1C6"
            },
            "baxis": {
             "endlinecolor": "#A2B1C6",
             "gridcolor": "#506784",
             "linecolor": "#506784",
             "minorgridcolor": "#506784",
             "startlinecolor": "#A2B1C6"
            },
            "type": "carpet"
           }
          ],
          "table": [
           {
            "cells": {
             "fill": {
              "color": "#506784"
             },
             "line": {
              "color": "rgb(17,17,17)"
             }
            },
            "header": {
             "fill": {
              "color": "#2a3f5f"
             },
             "line": {
              "color": "rgb(17,17,17)"
             }
            },
            "type": "table"
           }
          ],
          "barpolar": [
           {
            "marker": {
             "line": {
              "color": "rgb(17,17,17)",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "barpolar"
           }
          ],
          "pie": [
           {
            "automargin": true,
            "type": "pie"
           }
          ]
         },
         "layout": {
          "autotypenumbers": "strict",
          "colorway": [
           "#636efa",
           "#EF553B",
           "#00cc96",
           "#ab63fa",
           "#FFA15A",
           "#19d3f3",
           "#FF6692",
           "#B6E880",
           "#FF97FF",
           "#FECB52"
          ],
          "font": {
           "color": "#f2f5fa"
          },
          "hovermode": "closest",
          "hoverlabel": {
           "align": "left"
          },
          "paper_bgcolor": "rgb(17,17,17)",
          "plot_bgcolor": "rgb(17,17,17)",
          "polar": {
           "bgcolor": "rgb(17,17,17)",
           "angularaxis": {
            "gridcolor": "#506784",
            "linecolor": "#506784",
            "ticks": ""
           },
           "radialaxis": {
            "gridcolor": "#506784",
            "linecolor": "#506784",
            "ticks": ""
           }
          },
          "ternary": {
           "bgcolor": "rgb(17,17,17)",
           "aaxis": {
            "gridcolor": "#506784",
            "linecolor": "#506784",
            "ticks": ""
           },
           "baxis": {
            "gridcolor": "#506784",
            "linecolor": "#506784",
            "ticks": ""
           },
           "caxis": {
            "gridcolor": "#506784",
            "linecolor": "#506784",
            "ticks": ""
           }
          },
          "coloraxis": {
           "colorbar": {
            "outlinewidth": 0,
            "ticks": ""
           }
          },
          "colorscale": {
           "sequential": [
            [
             0.0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1.0,
             "#f0f921"
            ]
           ],
           "sequentialminus": [
            [
             0.0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1.0,
             "#f0f921"
            ]
           ],
           "diverging": [
            [
             0,
             "#8e0152"
            ],
            [
             0.1,
             "#c51b7d"
            ],
            [
             0.2,
             "#de77ae"
            ],
            [
             0.3,
             "#f1b6da"
            ],
            [
             0.4,
             "#fde0ef"
            ],
            [
             0.5,
             "#f7f7f7"
            ],
            [
             0.6,
             "#e6f5d0"
            ],
            [
             0.7,
             "#b8e186"
            ],
            [
             0.8,
             "#7fbc41"
            ],
            [
             0.9,
             "#4d9221"
            ],
            [
             1,
             "#276419"
            ]
           ]
          },
          "xaxis": {
           "gridcolor": "#283442",
           "linecolor": "#506784",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "#283442",
           "automargin": true,
           "zerolinewidth": 2
          },
          "yaxis": {
           "gridcolor": "#283442",
           "linecolor": "#506784",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "#283442",
           "automargin": true,
           "zerolinewidth": 2
          },
          "scene": {
           "xaxis": {
            "backgroundcolor": "rgb(17,17,17)",
            "gridcolor": "#506784",
            "linecolor": "#506784",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "#C8D4E3",
            "gridwidth": 2
           },
           "yaxis": {
            "backgroundcolor": "rgb(17,17,17)",
            "gridcolor": "#506784",
            "linecolor": "#506784",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "#C8D4E3",
            "gridwidth": 2
           },
           "zaxis": {
            "backgroundcolor": "rgb(17,17,17)",
            "gridcolor": "#506784",
            "linecolor": "#506784",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "#C8D4E3",
            "gridwidth": 2
           }
          },
          "shapedefaults": {
           "line": {
            "color": "#f2f5fa"
           }
          },
          "annotationdefaults": {
           "arrowcolor": "#f2f5fa",
           "arrowhead": 0,
           "arrowwidth": 1
          },
          "geo": {
           "bgcolor": "rgb(17,17,17)",
           "landcolor": "rgb(17,17,17)",
           "subunitcolor": "#506784",
           "showland": true,
           "showlakes": true,
           "lakecolor": "rgb(17,17,17)"
          },
          "title": {
           "x": 0.05
          },
          "updatemenudefaults": {
           "bgcolor": "#506784",
           "borderwidth": 0
          },
          "sliderdefaults": {
           "bgcolor": "#C8D4E3",
           "borderwidth": 1,
           "bordercolor": "rgb(17,17,17)",
           "tickwidth": 0
          },
          "mapbox": {
           "style": "dark"
          }
         }
        },
        "title": {
         "text": "Fuel Efficiency Visual"
        },
        "xaxis": {
         "title": {
          "text": "Date"
         }
        },
        "yaxis": {
         "title": {
          "text": "FuelEfficiency"
         }
        },
        "updatemenus": [
         {
          "active": 0,
          "buttons": [
           {
            "args": [
             {
              "visible": [
               true,
               true,
               true
              ]
             },
             {
              "title": "ALL"
             }
            ],
            "label": "None",
            "method": "update"
           },
           {
            "args": [
             {
              "visible": [
               true,
               false,
               false
              ]
             },
             {
              "title": "Audi Q5"
             }
            ],
            "label": "Audi Q5",
            "method": "update"
           },
           {
            "args": [
             {
              "visible": [
               false,
               true,
               false
              ]
             },
             {
              "title": "Merucedes GLE"
             }
            ],
            "label": "Merucedes GLE",
            "method": "update"
           },
           {
            "args": [
             {
              "visible": [
               false,
               false,
               true
              ]
             },
             {
              "title": "BMW X5"
             }
            ],
            "label": "BMW X5",
            "method": "update"
           }
          ]
         }
        ]
       },
       "config": {
        "plotlyServerURL": "https://plot.ly"
       }
      },
      "text/html": "<div>                            <div id=\"3d9e68aa-d0f8-419f-bb92-7608c8b19d9e\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"3d9e68aa-d0f8-419f-bb92-7608c8b19d9e\")) {                    Plotly.newPlot(                        \"3d9e68aa-d0f8-419f-bb92-7608c8b19d9e\",                        [{\"marker\":{\"color\":\"DarkOrange\"},\"mode\":\"lines+markers\",\"name\":\"Audi Q5\",\"x\":[\"2020-01-01\",\"2020-01-02\",\"2020-01-03\",\"2020-01-04\",\"2020-01-05\",\"2020-01-06\",\"2020-01-07\",\"2020-01-08\",\"2020-01-09\",\"2020-01-10\"],\"y\":[12.38,11.06,9.34,13.78,10.23,11.55,12.02,12.66,13.23,14.22],\"type\":\"scatter\"},{\"marker\":{\"color\":\"Crimson\"},\"mode\":\"lines+markers\",\"name\":\"Merucedes GLE\",\"x\":[\"2020-01-01\",\"2020-01-02\",\"2020-01-03\",\"2020-01-04\",\"2020-01-05\",\"2020-01-06\",\"2020-01-07\",\"2020-01-08\",\"2020-01-09\",\"2020-01-10\"],\"y\":[9.87,8.06,9.34,9.78,10.23,9.55,10.02,9.66,8.23,9.22],\"type\":\"scatter\"},{\"marker\":{\"color\":\"RebeccaPurple\"},\"mode\":\"lines+markers\",\"name\":\"BMW X5\",\"x\":[\"2020-01-01\",\"2020-01-02\",\"2020-01-03\",\"2020-01-04\",\"2020-01-05\",\"2020-01-06\",\"2020-01-07\",\"2020-01-08\",\"2020-01-09\",\"2020-01-10\"],\"y\":[11.87,14.06,11.34,10.78,11.23,12.57,14.02,13.86,13.63,11.22],\"type\":\"scatter\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"marker\":{\"line\":{\"color\":\"#283442\"}},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#f2f5fa\"},\"error_y\":{\"color\":\"#f2f5fa\"},\"marker\":{\"line\":{\"color\":\"rgb(17,17,17)\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"marker\":{\"line\":{\"color\":\"#283442\"}},\"type\":\"scattergl\"}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#A2B1C6\",\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"minorgridcolor\":\"#506784\",\"startlinecolor\":\"#A2B1C6\"},\"baxis\":{\"endlinecolor\":\"#A2B1C6\",\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"minorgridcolor\":\"#506784\",\"startlinecolor\":\"#A2B1C6\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#506784\"},\"line\":{\"color\":\"rgb(17,17,17)\"}},\"header\":{\"fill\":{\"color\":\"#2a3f5f\"},\"line\":{\"color\":\"rgb(17,17,17)\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"rgb(17,17,17)\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#f2f5fa\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"rgb(17,17,17)\",\"plot_bgcolor\":\"rgb(17,17,17)\",\"polar\":{\"bgcolor\":\"rgb(17,17,17)\",\"angularaxis\":{\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"rgb(17,17,17)\",\"aaxis\":{\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"#283442\",\"linecolor\":\"#506784\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"#283442\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"#283442\",\"linecolor\":\"#506784\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"#283442\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"rgb(17,17,17)\",\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"#C8D4E3\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"rgb(17,17,17)\",\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"#C8D4E3\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"rgb(17,17,17)\",\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"#C8D4E3\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#f2f5fa\"}},\"annotationdefaults\":{\"arrowcolor\":\"#f2f5fa\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"rgb(17,17,17)\",\"landcolor\":\"rgb(17,17,17)\",\"subunitcolor\":\"#506784\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"rgb(17,17,17)\"},\"title\":{\"x\":0.05},\"updatemenudefaults\":{\"bgcolor\":\"#506784\",\"borderwidth\":0},\"sliderdefaults\":{\"bgcolor\":\"#C8D4E3\",\"borderwidth\":1,\"bordercolor\":\"rgb(17,17,17)\",\"tickwidth\":0},\"mapbox\":{\"style\":\"dark\"}}},\"title\":{\"text\":\"Fuel Efficiency Visual\"},\"xaxis\":{\"title\":{\"text\":\"Date\"}},\"yaxis\":{\"title\":{\"text\":\"FuelEfficiency\"}},\"updatemenus\":[{\"active\":0,\"buttons\":[{\"args\":[{\"visible\":[true,true,true]},{\"title\":\"ALL\"}],\"label\":\"None\",\"method\":\"update\"},{\"args\":[{\"visible\":[true,false,false]},{\"title\":\"Audi Q5\"}],\"label\":\"Audi Q5\",\"method\":\"update\"},{\"args\":[{\"visible\":[false,true,false]},{\"title\":\"Merucedes GLE\"}],\"label\":\"Merucedes GLE\",\"method\":\"update\"},{\"args\":[{\"visible\":[false,false,true]},{\"title\":\"BMW X5\"}],\"label\":\"BMW X5\",\"method\":\"update\"}]}]},                        {\"responsive\": true}                    ).then(function(){\n                            \nvar gd = document.getElementById('3d9e68aa-d0f8-419f-bb92-7608c8b19d9e');\nvar x = new MutationObserver(function (mutations, observer) {{\n        var display = window.getComputedStyle(gd).display;\n        if (!display || display === 'none') {{\n            console.log([gd, 'removed!']);\n            Plotly.purge(gd);\n            observer.disconnect();\n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            </script>        </div>"
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import io\n",
    "\n",
    "data = '''\n",
    "date car \"Fuel Efficiency\"\n",
    "2020-01-01 \"Audi Q5\" 12.38\n",
    "2020-01-02 \"Audi Q5\" 11.06\n",
    "2020-01-03 \"Audi Q5\" 9.34\n",
    "2020-01-04 \"Audi Q5\" 13.78\n",
    "2020-01-05 \"Audi Q5\" 10.23\n",
    "2020-01-06 \"Audi Q5\" 11.55\n",
    "2020-01-07 \"Audi Q5\" 12.02\n",
    "2020-01-08 \"Audi Q5\" 12.66\n",
    "2020-01-09 \"Audi Q5\" 13.23\n",
    "2020-01-10 \"Audi Q5\" 14.22\n",
    "2020-01-01 \"Merucedes GLE\" 9.87\n",
    "2020-01-02 \"Merucedes GLE\" 8.06\n",
    "2020-01-03 \"Merucedes GLE\" 9.34\n",
    "2020-01-04 \"Merucedes GLE\" 9.78\n",
    "2020-01-05 \"Merucedes GLE\" 10.23\n",
    "2020-01-06 \"Merucedes GLE\" 9.55\n",
    "2020-01-07 \"Merucedes GLE\" 10.02\n",
    "2020-01-08 \"Merucedes GLE\" 9.66\n",
    "2020-01-09 \"Merucedes GLE\" 8.23\n",
    "2020-01-10 \"Merucedes GLE\" 9.22\n",
    "2020-01-01 \"BMW X5\" 11.87\n",
    "2020-01-02 \"BMW X5\" 14.06\n",
    "2020-01-03 \"BMW X5\" 11.34\n",
    "2020-01-04 \"BMW X5\" 10.78\n",
    "2020-01-05 \"BMW X5\" 11.23\n",
    "2020-01-06 \"BMW X5\" 12.57\n",
    "2020-01-07 \"BMW X5\" 14.02\n",
    "2020-01-08 \"BMW X5\" 13.86\n",
    "2020-01-09 \"BMW X5\" 13.63\n",
    "2020-01-10 \"BMW X5\" 11.22\n",
    "'''\n",
    "\n",
    "parc_2 = pd.read_csv('C:\\\\Users\\\\alvesd\\\\OneDrive - smmt.co.uk\\\\Desktop\\\\Diego_work_folder\\\\python\\\\33_Sales_Target_Region_Vehicle_Seats\\\\Parc_Numeric_Data_2.csv')\n",
    "\n",
    "df = pd.read_csv(io.StringIO(data), sep='\\s+')\n",
    "\n",
    "import plotly.graph_objects as go\n",
    "\n",
    "audi = df[df['car'] == 'Audi Q5']\n",
    "benz = df[df['car'] == 'Merucedes GLE']\n",
    "bmw = df[df['car'] == 'BMW X5']\n",
    "x = df['date'].unique()\n",
    "\n",
    "fig = go.Figure()\n",
    "\n",
    "fig.add_trace(go.Scatter(x=x, y=audi['Fuel Efficiency'],\n",
    "                    mode='lines+markers',\n",
    "                    name='Audi Q5', marker=dict(color=\"DarkOrange\"))),\n",
    "fig.add_trace(go.Scatter(x=x, y=benz['Fuel Efficiency'],\n",
    "                    mode='lines+markers',\n",
    "                    name='Merucedes GLE', marker=dict(color=\"Crimson\"))),\n",
    "fig.add_trace(go.Scatter(x=x, y=bmw['Fuel Efficiency'],\n",
    "                    mode='lines+markers', name='BMW X5', marker=dict(color=\"RebeccaPurple\")))\n",
    "\n",
    "fig.update_layout(title_text='Fuel Efficiency Visual',\n",
    "                 xaxis_title='Date', yaxis_title='FuelEfficiency')\n",
    "\n",
    "\n",
    "fig.update_layout(\n",
    "    updatemenus=[\n",
    "        dict(active=0,\n",
    "            buttons=list([\n",
    "            dict(label=\"None\",\n",
    "                 method=\"update\",\n",
    "                 args=[{\"visible\":[True,True,True]},\n",
    "                       {\"title\":\"ALL\"}]),\n",
    "            dict(label=\"Audi Q5\",\n",
    "                 method=\"update\",\n",
    "                 args=[{\"visible\":[True, False, False]},\n",
    "                       {\"title\":\"Audi Q5\"}]),\n",
    "            dict(label=\"Merucedes GLE\",\n",
    "                 method=\"update\",\n",
    "                 args=[{\"visible\":[False,True,False]},\n",
    "                       {\"title\":\"Merucedes GLE\"}]),\n",
    "            dict(label=\"BMW X5\",\n",
    "                 method=\"update\",\n",
    "                 args=[{\"visible\":[False,False,True]},\n",
    "                       {\"title\":\"BMW X5\"}])\n",
    "        ]),\n",
    "        )\n",
    "    ]\n",
    ")\n",
    "\n",
    "fig.show()"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2023-12-20T13:45:50.182287900Z",
     "start_time": "2023-12-20T13:45:50.165130Z"
    }
   },
   "id": "b398b76b81fcf64f"
  },
  {
   "cell_type": "code",
   "execution_count": 569,
   "outputs": [
    {
     "data": {
      "text/plain": "    Postcode District   latitude  longitude             Make  Number of Seats  \\\n42                WN8  53.553189  -2.769476       DAF TRUCKS                2   \n104               SG6  51.979023  -0.222730            ISUZU                2   \n169               B78  52.605569  -1.673321  MITSUBISHI FUSO                2   \n373               CV9  52.586165  -1.561621         MERCEDES                2   \n554              RG41  51.416808  -0.863365            ISUZU                2   \n\n     Company/Private  Registrations  Body Style  cluster  \n42                 0              8           6        3  \n104                0             11           6        1  \n169                0              5           6        3  \n373                0              8           6        3  \n554                0              5           6        1  ",
      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Postcode District</th>\n      <th>latitude</th>\n      <th>longitude</th>\n      <th>Make</th>\n      <th>Number of Seats</th>\n      <th>Company/Private</th>\n      <th>Registrations</th>\n      <th>Body Style</th>\n      <th>cluster</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>42</th>\n      <td>WN8</td>\n      <td>53.553189</td>\n      <td>-2.769476</td>\n      <td>DAF TRUCKS</td>\n      <td>2</td>\n      <td>0</td>\n      <td>8</td>\n      <td>6</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>104</th>\n      <td>SG6</td>\n      <td>51.979023</td>\n      <td>-0.222730</td>\n      <td>ISUZU</td>\n      <td>2</td>\n      <td>0</td>\n      <td>11</td>\n      <td>6</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>169</th>\n      <td>B78</td>\n      <td>52.605569</td>\n      <td>-1.673321</td>\n      <td>MITSUBISHI FUSO</td>\n      <td>2</td>\n      <td>0</td>\n      <td>5</td>\n      <td>6</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>373</th>\n      <td>CV9</td>\n      <td>52.586165</td>\n      <td>-1.561621</td>\n      <td>MERCEDES</td>\n      <td>2</td>\n      <td>0</td>\n      <td>8</td>\n      <td>6</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>554</th>\n      <td>RG41</td>\n      <td>51.416808</td>\n      <td>-0.863365</td>\n      <td>ISUZU</td>\n      <td>2</td>\n      <td>0</td>\n      <td>5</td>\n      <td>6</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
     },
     "execution_count": 569,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv('C:\\\\Users\\\\alvesd\\\\OneDrive - smmt.co.uk\\\\Desktop\\\\Diego_work_folder\\\\python\\\\33_Sales_Target_Region_Vehicle_Seats\\\\Parc_Numeric_Data_2.csv')\n",
    "#print(Parc_Numeric_Data.head())\n",
    "df = df[df[\"Registrations\"]>=5]\n",
    "df.head()"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2023-12-20T13:45:50.192695500Z",
     "start_time": "2023-12-20T13:45:50.182287900Z"
    }
   },
   "id": "8c5f38676809a32a"
  },
  {
   "cell_type": "code",
   "execution_count": 570,
   "outputs": [
    {
     "data": {
      "application/vnd.plotly.v1+json": {
       "data": [
        {
         "marker": {
          "color": "DarkOrange"
         },
         "mode": "lines+markers",
         "name": "1",
         "x": [
          8,
          11,
          5,
          9,
          6,
          7,
          10
         ],
         "y": [
          1,
          1,
          3,
          3,
          5,
          3
         ],
         "type": "scatter"
        },
        {
         "marker": {
          "color": "Crimson"
         },
         "mode": "lines+markers",
         "name": "2",
         "x": [
          8,
          11,
          5,
          9,
          6,
          7,
          10
         ],
         "y": [
          3,
          3,
          3
         ],
         "type": "scatter"
        },
        {
         "marker": {
          "color": "RebeccaPurple"
         },
         "mode": "lines+markers",
         "name": "3",
         "x": [
          8,
          11,
          5,
          9,
          6,
          7,
          10
         ],
         "y": [
          3,
          1,
          1
         ],
         "type": "scatter"
        }
       ],
       "layout": {
        "template": {
         "data": {
          "histogram2dcontour": [
           {
            "type": "histogram2dcontour",
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0.0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1.0,
              "#f0f921"
             ]
            ]
           }
          ],
          "choropleth": [
           {
            "type": "choropleth",
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            }
           }
          ],
          "histogram2d": [
           {
            "type": "histogram2d",
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0.0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1.0,
              "#f0f921"
             ]
            ]
           }
          ],
          "heatmap": [
           {
            "type": "heatmap",
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0.0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1.0,
              "#f0f921"
             ]
            ]
           }
          ],
          "heatmapgl": [
           {
            "type": "heatmapgl",
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0.0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1.0,
              "#f0f921"
             ]
            ]
           }
          ],
          "contourcarpet": [
           {
            "type": "contourcarpet",
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            }
           }
          ],
          "contour": [
           {
            "type": "contour",
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0.0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1.0,
              "#f0f921"
             ]
            ]
           }
          ],
          "surface": [
           {
            "type": "surface",
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0.0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1.0,
              "#f0f921"
             ]
            ]
           }
          ],
          "mesh3d": [
           {
            "type": "mesh3d",
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            }
           }
          ],
          "scatter": [
           {
            "marker": {
             "line": {
              "color": "#283442"
             }
            },
            "type": "scatter"
           }
          ],
          "parcoords": [
           {
            "type": "parcoords",
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            }
           }
          ],
          "scatterpolargl": [
           {
            "type": "scatterpolargl",
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            }
           }
          ],
          "bar": [
           {
            "error_x": {
             "color": "#f2f5fa"
            },
            "error_y": {
             "color": "#f2f5fa"
            },
            "marker": {
             "line": {
              "color": "rgb(17,17,17)",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "bar"
           }
          ],
          "scattergeo": [
           {
            "type": "scattergeo",
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            }
           }
          ],
          "scatterpolar": [
           {
            "type": "scatterpolar",
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            }
           }
          ],
          "histogram": [
           {
            "marker": {
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "histogram"
           }
          ],
          "scattergl": [
           {
            "marker": {
             "line": {
              "color": "#283442"
             }
            },
            "type": "scattergl"
           }
          ],
          "scatter3d": [
           {
            "type": "scatter3d",
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            }
           }
          ],
          "scattermapbox": [
           {
            "type": "scattermapbox",
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            }
           }
          ],
          "scatterternary": [
           {
            "type": "scatterternary",
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            }
           }
          ],
          "scattercarpet": [
           {
            "type": "scattercarpet",
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            }
           }
          ],
          "carpet": [
           {
            "aaxis": {
             "endlinecolor": "#A2B1C6",
             "gridcolor": "#506784",
             "linecolor": "#506784",
             "minorgridcolor": "#506784",
             "startlinecolor": "#A2B1C6"
            },
            "baxis": {
             "endlinecolor": "#A2B1C6",
             "gridcolor": "#506784",
             "linecolor": "#506784",
             "minorgridcolor": "#506784",
             "startlinecolor": "#A2B1C6"
            },
            "type": "carpet"
           }
          ],
          "table": [
           {
            "cells": {
             "fill": {
              "color": "#506784"
             },
             "line": {
              "color": "rgb(17,17,17)"
             }
            },
            "header": {
             "fill": {
              "color": "#2a3f5f"
             },
             "line": {
              "color": "rgb(17,17,17)"
             }
            },
            "type": "table"
           }
          ],
          "barpolar": [
           {
            "marker": {
             "line": {
              "color": "rgb(17,17,17)",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "barpolar"
           }
          ],
          "pie": [
           {
            "automargin": true,
            "type": "pie"
           }
          ]
         },
         "layout": {
          "autotypenumbers": "strict",
          "colorway": [
           "#636efa",
           "#EF553B",
           "#00cc96",
           "#ab63fa",
           "#FFA15A",
           "#19d3f3",
           "#FF6692",
           "#B6E880",
           "#FF97FF",
           "#FECB52"
          ],
          "font": {
           "color": "#f2f5fa"
          },
          "hovermode": "closest",
          "hoverlabel": {
           "align": "left"
          },
          "paper_bgcolor": "rgb(17,17,17)",
          "plot_bgcolor": "rgb(17,17,17)",
          "polar": {
           "bgcolor": "rgb(17,17,17)",
           "angularaxis": {
            "gridcolor": "#506784",
            "linecolor": "#506784",
            "ticks": ""
           },
           "radialaxis": {
            "gridcolor": "#506784",
            "linecolor": "#506784",
            "ticks": ""
           }
          },
          "ternary": {
           "bgcolor": "rgb(17,17,17)",
           "aaxis": {
            "gridcolor": "#506784",
            "linecolor": "#506784",
            "ticks": ""
           },
           "baxis": {
            "gridcolor": "#506784",
            "linecolor": "#506784",
            "ticks": ""
           },
           "caxis": {
            "gridcolor": "#506784",
            "linecolor": "#506784",
            "ticks": ""
           }
          },
          "coloraxis": {
           "colorbar": {
            "outlinewidth": 0,
            "ticks": ""
           }
          },
          "colorscale": {
           "sequential": [
            [
             0.0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1.0,
             "#f0f921"
            ]
           ],
           "sequentialminus": [
            [
             0.0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1.0,
             "#f0f921"
            ]
           ],
           "diverging": [
            [
             0,
             "#8e0152"
            ],
            [
             0.1,
             "#c51b7d"
            ],
            [
             0.2,
             "#de77ae"
            ],
            [
             0.3,
             "#f1b6da"
            ],
            [
             0.4,
             "#fde0ef"
            ],
            [
             0.5,
             "#f7f7f7"
            ],
            [
             0.6,
             "#e6f5d0"
            ],
            [
             0.7,
             "#b8e186"
            ],
            [
             0.8,
             "#7fbc41"
            ],
            [
             0.9,
             "#4d9221"
            ],
            [
             1,
             "#276419"
            ]
           ]
          },
          "xaxis": {
           "gridcolor": "#283442",
           "linecolor": "#506784",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "#283442",
           "automargin": true,
           "zerolinewidth": 2
          },
          "yaxis": {
           "gridcolor": "#283442",
           "linecolor": "#506784",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "#283442",
           "automargin": true,
           "zerolinewidth": 2
          },
          "scene": {
           "xaxis": {
            "backgroundcolor": "rgb(17,17,17)",
            "gridcolor": "#506784",
            "linecolor": "#506784",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "#C8D4E3",
            "gridwidth": 2
           },
           "yaxis": {
            "backgroundcolor": "rgb(17,17,17)",
            "gridcolor": "#506784",
            "linecolor": "#506784",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "#C8D4E3",
            "gridwidth": 2
           },
           "zaxis": {
            "backgroundcolor": "rgb(17,17,17)",
            "gridcolor": "#506784",
            "linecolor": "#506784",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "#C8D4E3",
            "gridwidth": 2
           }
          },
          "shapedefaults": {
           "line": {
            "color": "#f2f5fa"
           }
          },
          "annotationdefaults": {
           "arrowcolor": "#f2f5fa",
           "arrowhead": 0,
           "arrowwidth": 1
          },
          "geo": {
           "bgcolor": "rgb(17,17,17)",
           "landcolor": "rgb(17,17,17)",
           "subunitcolor": "#506784",
           "showland": true,
           "showlakes": true,
           "lakecolor": "rgb(17,17,17)"
          },
          "title": {
           "x": 0.05
          },
          "updatemenudefaults": {
           "bgcolor": "#506784",
           "borderwidth": 0
          },
          "sliderdefaults": {
           "bgcolor": "#C8D4E3",
           "borderwidth": 1,
           "bordercolor": "rgb(17,17,17)",
           "tickwidth": 0
          },
          "mapbox": {
           "style": "dark"
          }
         }
        },
        "title": {
         "text": "Cluster"
        },
        "xaxis": {
         "title": {
          "text": "Registrations"
         }
        },
        "yaxis": {
         "title": {
          "text": "Cluster"
         }
        },
        "updatemenus": [
         {
          "active": 0,
          "buttons": [
           {
            "args": [
             {
              "visible": [
               true,
               true,
               true
              ]
             },
             {
              "title": "ALL"
             }
            ],
            "label": "None",
            "method": "update"
           },
           {
            "args": [
             {
              "visible": [
               true,
               false,
               false
              ]
             },
             {
              "title": "analysis_1"
             }
            ],
            "label": "analysis_1",
            "method": "update"
           },
           {
            "args": [
             {
              "visible": [
               false,
               true,
               false
              ]
             },
             {
              "title": "analysis_2"
             }
            ],
            "label": "analysis_2",
            "method": "update"
           },
           {
            "args": [
             {
              "visible": [
               false,
               false,
               true
              ]
             },
             {
              "title": "analysis_3"
             }
            ],
            "label": "analysis_3",
            "method": "update"
           }
          ]
         }
        ]
       },
       "config": {
        "plotlyServerURL": "https://plot.ly"
       }
      },
      "text/html": "<div>                            <div id=\"272d61ef-b82f-417a-bbf7-b4cf3f7b6606\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"272d61ef-b82f-417a-bbf7-b4cf3f7b6606\")) {                    Plotly.newPlot(                        \"272d61ef-b82f-417a-bbf7-b4cf3f7b6606\",                        [{\"marker\":{\"color\":\"DarkOrange\"},\"mode\":\"lines+markers\",\"name\":\"1\",\"x\":[8,11,5,9,6,7,10],\"y\":[1,1,3,3,5,3],\"type\":\"scatter\"},{\"marker\":{\"color\":\"Crimson\"},\"mode\":\"lines+markers\",\"name\":\"2\",\"x\":[8,11,5,9,6,7,10],\"y\":[3,3,3],\"type\":\"scatter\"},{\"marker\":{\"color\":\"RebeccaPurple\"},\"mode\":\"lines+markers\",\"name\":\"3\",\"x\":[8,11,5,9,6,7,10],\"y\":[3,1,1],\"type\":\"scatter\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"marker\":{\"line\":{\"color\":\"#283442\"}},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#f2f5fa\"},\"error_y\":{\"color\":\"#f2f5fa\"},\"marker\":{\"line\":{\"color\":\"rgb(17,17,17)\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"marker\":{\"line\":{\"color\":\"#283442\"}},\"type\":\"scattergl\"}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#A2B1C6\",\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"minorgridcolor\":\"#506784\",\"startlinecolor\":\"#A2B1C6\"},\"baxis\":{\"endlinecolor\":\"#A2B1C6\",\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"minorgridcolor\":\"#506784\",\"startlinecolor\":\"#A2B1C6\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#506784\"},\"line\":{\"color\":\"rgb(17,17,17)\"}},\"header\":{\"fill\":{\"color\":\"#2a3f5f\"},\"line\":{\"color\":\"rgb(17,17,17)\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"rgb(17,17,17)\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#f2f5fa\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"rgb(17,17,17)\",\"plot_bgcolor\":\"rgb(17,17,17)\",\"polar\":{\"bgcolor\":\"rgb(17,17,17)\",\"angularaxis\":{\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"rgb(17,17,17)\",\"aaxis\":{\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"#283442\",\"linecolor\":\"#506784\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"#283442\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"#283442\",\"linecolor\":\"#506784\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"#283442\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"rgb(17,17,17)\",\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"#C8D4E3\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"rgb(17,17,17)\",\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"#C8D4E3\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"rgb(17,17,17)\",\"gridcolor\":\"#506784\",\"linecolor\":\"#506784\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"#C8D4E3\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#f2f5fa\"}},\"annotationdefaults\":{\"arrowcolor\":\"#f2f5fa\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"rgb(17,17,17)\",\"landcolor\":\"rgb(17,17,17)\",\"subunitcolor\":\"#506784\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"rgb(17,17,17)\"},\"title\":{\"x\":0.05},\"updatemenudefaults\":{\"bgcolor\":\"#506784\",\"borderwidth\":0},\"sliderdefaults\":{\"bgcolor\":\"#C8D4E3\",\"borderwidth\":1,\"bordercolor\":\"rgb(17,17,17)\",\"tickwidth\":0},\"mapbox\":{\"style\":\"dark\"}}},\"title\":{\"text\":\"Cluster\"},\"xaxis\":{\"title\":{\"text\":\"Registrations\"}},\"yaxis\":{\"title\":{\"text\":\"Cluster\"}},\"updatemenus\":[{\"active\":0,\"buttons\":[{\"args\":[{\"visible\":[true,true,true]},{\"title\":\"ALL\"}],\"label\":\"None\",\"method\":\"update\"},{\"args\":[{\"visible\":[true,false,false]},{\"title\":\"analysis_1\"}],\"label\":\"analysis_1\",\"method\":\"update\"},{\"args\":[{\"visible\":[false,true,false]},{\"title\":\"analysis_2\"}],\"label\":\"analysis_2\",\"method\":\"update\"},{\"args\":[{\"visible\":[false,false,true]},{\"title\":\"analysis_3\"}],\"label\":\"analysis_3\",\"method\":\"update\"}]}]},                        {\"responsive\": true}                    ).then(function(){\n                            \nvar gd = document.getElementById('272d61ef-b82f-417a-bbf7-b4cf3f7b6606');\nvar x = new MutationObserver(function (mutations, observer) {{\n        var display = window.getComputedStyle(gd).display;\n        if (!display || display === 'none') {{\n            console.log([gd, 'removed!']);\n            Plotly.purge(gd);\n            observer.disconnect();\n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            </script>        </div>"
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import plotly.graph_objects as go\n",
    "\n",
    "analysis_1 = df[df['Make'] == 'ISUZU']\n",
    "analysis_2 = df[df['Make'] == 'PEUGEOT']\n",
    "analysis_3 = df[df['Make'] == 'DAF TRUCKS']\n",
    "x = df['Registrations'].unique()\n",
    "\n",
    "fig = go.Figure()\n",
    "\n",
    "fig.add_trace(go.Scatter(x=x, y=analysis_1 ['cluster'],\n",
    "                    mode='lines+markers',\n",
    "                    name='1', marker=dict(color=\"DarkOrange\"))),\n",
    "fig.add_trace(go.Scatter(x=x, y=analysis_2 ['cluster'],\n",
    "                    mode='lines+markers',\n",
    "                    name='2', marker=dict(color=\"Crimson\"))),\n",
    "fig.add_trace(go.Scatter(x=x, y=analysis_3 ['cluster'],\n",
    "                    mode='lines+markers', name='3', marker=dict(color=\"RebeccaPurple\")))\n",
    "\n",
    "fig.update_layout(title_text='Cluster',\n",
    "                 xaxis_title='Registrations', yaxis_title='Cluster')\n",
    "\n",
    "\n",
    "fig.update_layout(\n",
    "    updatemenus=[\n",
    "        dict(active=0,\n",
    "            buttons=list([\n",
    "            dict(label=\"None\",\n",
    "                 method=\"update\",\n",
    "                 args=[{\"visible\":[True,True,True]},\n",
    "                       {\"title\":\"ALL\"}]),\n",
    "            dict(label=\"analysis_1\",\n",
    "                 method=\"update\",\n",
    "                 args=[{\"visible\":[True, False, False]},\n",
    "                       {\"title\":\"analysis_1\"}]),\n",
    "            dict(label=\"analysis_2\",\n",
    "                 method=\"update\",\n",
    "                 args=[{\"visible\":[False,True,False]},\n",
    "                       {\"title\":\"analysis_2\"}]),\n",
    "            dict(label=\"analysis_3\",\n",
    "                 method=\"update\",\n",
    "                 args=[{\"visible\":[False,False,True]},\n",
    "                       {\"title\":\"analysis_3\"}])\n",
    "        ]),\n",
    "        )\n",
    "    ]\n",
    ")\n",
    "\n",
    "fig.show()"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2023-12-20T13:45:50.226705300Z",
     "start_time": "2023-12-20T13:45:50.192695500Z"
    }
   },
   "id": "904f87d73c35fb95"
  },
  {
   "cell_type": "code",
   "execution_count": 571,
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Step 1: Delete the old files from the directory:\n",
      "Parc_Data.xlsx\n",
      "Parc_Numeric_Data_1.xlsx\n",
      "Parc_Numeric_Data_2.xlsx\n",
      "Parc_Data.csv\n",
      "Parc_Numeric_Data_2.csv\n"
     ]
    }
   ],
   "source": [
    "print('Step 1: Delete the old files from the directory:')\n",
    "path = r'C:\\\\Users\\\\alvesd\\\\OneDrive - smmt.co.uk\\\\Desktop\\\\Diego_work_folder\\\\python\\\\33_Sales_Target_Region_Vehicle_Seats'\n",
    "os.chdir(path)\n",
    "for file in os.listdir(path):\n",
    "    if file.endswith('.xlsx') or file.endswith('.xls'):\n",
    "        print(file)\n",
    "        os.remove(file)\n",
    "\n",
    "for file in os.listdir(path):\n",
    "    if file.endswith('.xlsx') or file.endswith('.csv'):\n",
    "        print(file)\n",
    "        os.remove(file)"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2023-12-20T13:45:50.333724200Z",
     "start_time": "2023-12-20T13:45:50.207699500Z"
    }
   },
   "id": "3982096da0f1581"
  },
  {
   "cell_type": "code",
   "execution_count": 572,
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Done up to here!!!\n"
     ]
    }
   ],
   "source": [
    "print('Done up to here!!!')"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2023-12-20T13:45:50.333724200Z",
     "start_time": "2023-12-20T13:45:50.256433Z"
    }
   },
   "id": "e42ff64a349eed68"
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
